<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var nodes = new[] { "AddAssign", "SubtractAssign", "MultiplyAssign", "DivideAssign", "ModuloAssign", "AndAssign", "OrAssign", "ExclusiveOrAssign", "LeftShiftAssign", "RightShiftAssign", "AddAssignChecked", "MultiplyAssignChecked", "SubtractAssignChecked" };
#>
// Prototyping extended expression trees for C#.
//
// bartde - November 2015

using System.Dynamic.Utils;
using System.Linq.Expressions;
using System.Reflection;

namespace Microsoft.CSharp.Expressions
{
	partial class AssignBinaryCSharpExpression
	{
        private static CSharpExpressionType ConvertNodeType(ExpressionType nodeType)
        {
			switch (nodeType)
			{
				case ExpressionType.Assign: return CSharpExpressionType.Assign;
<#
foreach (var node in nodes)
{
#>
				case ExpressionType.<#=node#>: return CSharpExpressionType.<#=node#>;
<#
}
#>
				default:
					throw ContractUtils.Unreachable;
			}
        }
	}

	partial class CSharpExpression
	{
		/// <summary>
		/// Creates a <see cref="AssignBinaryCSharpExpression" /> that represents an assignment.
		/// </summary>
		/// <returns>A <see cref="AssignBinaryCSharpExpression" /> that represents the operation.</returns>
		/// <param name="left">An <see cref="Expression" /> to set the <see cref="AssignBinaryCSharpExpression.Left" /> property equal to.</param>
		/// <param name="right">An <see cref="Expression" /> to set the <see cref="AssignBinaryCSharpExpression.Right" /> property equal to.</param>
		public static new AssignBinaryCSharpExpression Assign(Expression left, Expression right)
		{
			return MakeBinaryAssign((l, r, m, c) => Expression.Assign(l, r), left, right, null, null);
		}

<#
foreach (var node in nodes)
{
#>
		/// <summary>
		/// Creates a <see cref="AssignBinaryCSharpExpression" /> that represents a compound assignment of type <#=node#>.
		/// </summary>
		/// <returns>A <see cref="AssignBinaryCSharpExpression" /> that represents the operation.</returns>
		/// <param name="left">An <see cref="Expression" /> to set the <see cref="AssignBinaryCSharpExpression.Left" /> property equal to.</param>
		/// <param name="right">An <see cref="Expression" /> to set the <see cref="AssignBinaryCSharpExpression.Right" /> property equal to.</param>
		public static new AssignBinaryCSharpExpression <#=node#>(Expression left, Expression right)
		{
			return <#=node#>(left, right, null, null);
		}

		/// <summary>
		/// Creates a <see cref="AssignBinaryCSharpExpression" /> that represents a compound assignment of type <#=node#>.
		/// </summary>
		/// <returns>A <see cref="AssignBinaryCSharpExpression" /> that represents the operation.</returns>
		/// <param name="left">An <see cref="Expression" /> to set the <see cref="AssignBinaryCSharpExpression.Left" /> property equal to.</param>
		/// <param name="right">An <see cref="Expression" /> to set the <see cref="AssignBinaryCSharpExpression.Right" /> property equal to.</param>
		/// <param name="method">A <see cref="MethodInfo" /> to set the <see cref="AssignBinaryCSharpExpression.Method" /> property equal to.</param>
		public static new AssignBinaryCSharpExpression <#=node#>(Expression left, Expression right, MethodInfo method)
		{
			return <#=node#>(left, right, method, null);
		}

		/// <summary>
		/// Creates a <see cref="AssignBinaryCSharpExpression" /> that represents a compound assignment of type <#=node#>.
		/// </summary>
		/// <returns>A <see cref="AssignBinaryCSharpExpression" /> that represents the operation.</returns>
		/// <param name="left">An <see cref="Expression" /> to set the <see cref="AssignBinaryCSharpExpression.Left" /> property equal to.</param>
		/// <param name="right">An <see cref="Expression" /> to set the <see cref="AssignBinaryCSharpExpression.Right" /> property equal to.</param>
		/// <param name="method">A <see cref="MethodInfo" /> to set the <see cref="AssignBinaryCSharpExpression.Method" /> property equal to.</param>
		/// <param name="conversion">A <see cref="LambdaExpression" /> to set the <see cref="AssignBinaryCSharpExpression.Conversion" /> property equal to.</param></param>
		public static new AssignBinaryCSharpExpression <#=node#>(Expression left, Expression right, MethodInfo method, LambdaExpression conversion)
		{
			return MakeBinaryAssign(Expression.<#=node#>, left, right, method, conversion);
		}

<#
}
#>
	}
}