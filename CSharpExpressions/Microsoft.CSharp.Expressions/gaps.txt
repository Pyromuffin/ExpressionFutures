Existing gaps in C# expression tree support
===========================================

Obtained by `findstr ExpressionTree` in Compilers\CSharp\Portable\CSharpResources.resx
See Compilers\CSharp\Portable\Lowering\DiagnosticsPass_ExpressionTrees.cs for usages of these

TODO
----

* Dynamic SetMember and SetIndex
* Dynamic assignments

Open
----

(Sorted roughly by priority)

Expressions
~~~~~~~~~~~

ERR_ExtensionCollectionElementInitializerInExpressionTree
- Can be lifted by adding new nodes; trickiness with ListInit / ElementInit not being extensible
- C# 6.0 feature addition, but applies to existing parent node types

ERR_ExpressionTreeContainsBadCoalesce
- () => null ?? "bar"
- Strange restriction, to be investigated

ERR_ByRefParameterInExpressionTree
- (ref int x) => ...
- Likely exists because the ByRef support was only added in DLR

ERR_ExpressionTreeContainsIndexedProperty
- Reasonable restriction; applies to COM interop only?
- May be easy to lift with existing (and new named/optional) Index factories


Statements
~~~~~~~~~~

ERR_ExpressionTreeContainsAnonymousMethod
- () => X(delegate { ... })
- To be revisited if/when we add statement support

ERR_AnonymousMethodToExpressionTree
- Expression<F> f = delegate { ... }
- To be revisited if/when we add statement support


Done
----

NB: This is done in the *runtime library* and not yet in the Roslyn compiler.
NB: Design for some of these is not yet final; however, we do have a first sketch of it.

ERR_ExpressionTreeContainsMultiDimensionalArrayInitializer
- () => new int[2, 2] { { 1, 2 }, { 3, 4 } }
- Can be lifted by adding a new ArrayInit node

ERR_BadAsyncExpressionTree
- async () => await x
- To be revisited if/when we async/await support

ERR_ExpressionTreeContainsNamedArgument
- () => Bar(x: 1)
- Can be lifted by adding new nodes

ERR_ExpressionTreeContainsOptionalArgument
- () => Bar(/*omitted argument*/)
- Can be lifted by adding new nodes; design question whether to resolve the default value at compile time or at runtime

ERR_NullPropagatingOpInExpressionTree
- Can be lifted by adding new nodes
- C# 6.0 feature addition

ERR_DictionaryInitializerInExpressionTree
- Can be lifted by adding new nodes; trickiness with MemberInit / MemberBinding not being extensible
- C# 6.0 feature addition but applies to existing parent node type

ERR_ExpressionTreeContainsDynamicOperation
- (dynamic d) => d.Foo()
- To be revisited if/when we add dynamic support

ERR_ExpressionTreeContainsAssignment
- () => a = 42
- To be revisited if/when we add statement support

ERR_StatementLambdaToExpressionTree
- () => { ... }
- To be revisited if/when we add statement support


Ignored
-------

ERR_PartialMethodInExpressionTree
- () => PartialMethod()
- Valid restriction

ERR_ExpressionTreeContainsBaseAccess
- () => base.Foo()
- Valid restriction

ERR_ExpressionTreeMustHaveDelegate
- Expression<int> f = ...
- Valid restriction

ERR_ExpressionTreeContainsPointerOp
- () => &x
- Valid restriction

ERR_VarArgsInExpressionTree
- Reasonable restriction

ERR_MemGroupInExpressionTree
- () => Console.WriteLine
- Reasonable restriction; has no type of its own

ERR_ComRefCallInExpressionTree
- Resonable restriction

ERR_FeatureNotValidInExpressionTree
- Applies for any of those: __reftype, __refvalue, __makeref
- Reasonable restriction