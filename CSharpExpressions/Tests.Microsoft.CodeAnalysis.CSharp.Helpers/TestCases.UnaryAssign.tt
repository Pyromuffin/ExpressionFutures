<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var types = new[] { "byte", "sbyte", "short", "ushort", "char", "int", "uint", "long", "ulong", "float", "double", "decimal" };
#>
// Prototyping extended expression trees for C#.
//
// bartde - November 2015

using System;
using System.Collections.Generic;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    public static partial class TestCases
    {
        // TODO: use these in the compiler tests
        public static IEnumerable<string> UnaryAssign
        {
            get
            {
<#
foreach (var type in types)
{
    var func = "Func<" + type + ", " + type + ">";

    var lambdas = new[]
    {
        "x => x++",
        "x => x--",
        "x => ++x",
        "x => --x",
        "x => checked(x++)",
        "x => checked(x--)",
        "x => checked(++x)",
        "x => checked(--x)",
    };

    foreach (var lambda in lambdas)
    {
#>
                { var f = (<#=func#>)(<#=lambda#>); }
                yield return "(Expression<<#=func#>>)(<#=lambda#>)";

<#
    }
}
#>
            }
        }
    }
}