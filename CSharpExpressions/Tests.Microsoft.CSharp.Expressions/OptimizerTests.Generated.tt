<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var cases = new Dictionary<string, Dictionary<string, string>>
{
	{
		"Blocks",
		new Dictionary<string, string>
		{
			{
				"Expression.Block(Expression.Empty())",
				"Expression.Empty()"
			},
			{
				"Expression.Block(Expression.Empty(), Expression.Empty())",
				"Expression.Empty()"
			},
			{
				"Expression.Block(CW, Expression.Empty())",
				"CW"
			},
			{
				"Expression.Block(Expression.Empty(), CW)",
				"CW"
			},
			{
				"Expression.Block(Expression.Empty(), CW, Expression.Empty())",
				"CW"
			},
			{
				"Expression.Block(Expression.Empty(), CWI(1), Expression.Empty(), CWI(2), Expression.Empty())",
				"Expression.Block(CWI(1), CWI(2))"
			},
			{
				"Expression.Block(CWI(1), CWI(2))",
				"Expression.Block(CWI(1), CWI(2))"
			},
			{
				"Expression.Block(Expression.Block(CWI(1)), CWI(2))",
				"Expression.Block(CWI(1), CWI(2))"
			},
			{
				"Expression.Block(CWI(1), Expression.Block(CWI(2)))",
				"Expression.Block(CWI(1), CWI(2))"
			},
			{
				"Expression.Block(Expression.Block(CWI(1), CWI(2)))",
				"Expression.Block(CWI(1), CWI(2))"
			},
			{
				"Expression.Block(Expression.Block(CWI(1), Expression.Empty()), Expression.Empty(), Expression.Block(CWI(2), Expression.Empty()))",
				"Expression.Block(CWI(1), CWI(2))"
			},
			{
				"Expression.Block(new[] { P1 }, Expression.Empty())",
				"Expression.Block(new[] { P1 }, Expression.Empty())"
			},
			{
				"Expression.Block(new[] { P1 }, CW)",
				"Expression.Block(new[] { P1 }, CW)"
			},
			{
				"Expression.Block(new[] { P1 }, Expression.Block(CW))",
				"Expression.Block(new[] { P1 }, CW)"
			},
			{
				"Expression.Block(new[] { P1 }, Expression.Block(CW, Expression.Empty()))",
				"Expression.Block(new[] { P1 }, CW)"
			},
			{
				"Expression.Block(new[] { P1 }, Expression.Block(new[] { P2 }, CW))",
				"Expression.Block(new[] { P1 }, Expression.Block(new[] { P2 }, CW))"
			},
			{
				"CSharpExpression.Block(new[] { Expression.Empty() }, RET)",
				"Expression.Empty()"
			},
			{
				"CSharpExpression.Block(new[] { Expression.Block(CW) }, RET)",
				"CW"
			},
			{
				"Expression.Block(CSharpExpression.Block(new[] { CW }, RET))",
				"CW"
			},
			{
				"CSharpExpression.Block(new[] { P1 }, new[] { Expression.Block(CW) }, RET)",
				"CSharpExpression.Block(new[] { P1 }, new[] { CW }, RET)"
			},
			{
				"CSharpExpression.Block(new[] { Expression.Block(new[] { P1 }, CW) }, RET)",
				"Expression.Block(new[] { P1 }, CW)"
			},
			{
				"Expression.Block(new[] { CSharpExpression.Block(new[] { P1 }, new[] { CW }, RET) })",
				"CSharpExpression.Block(new[] { P1 }, new[] { CW }, RET)"
			},
		}
	}
};
#>
// Prototyping extended expression trees for C#.
//
// bartde - December 2015

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq.Expressions;
using Microsoft.CSharp.Expressions;

namespace Tests
{
    partial class OptimizerTests
    {
<#
foreach (var @case in cases)
{
	var i = 0;
	foreach (var kv in @case.Value)
	{
#>
        [TestMethod]
        public void Optimizer_<#=@case.Key#>_<#=i#>()
        {
            var expression = <#=kv.Key#>;
            var expected = <#=kv.Value#>;
            AssertOptimize(expression, expected);
        }

<#
		i++;
	}
}
#>
    }
}
