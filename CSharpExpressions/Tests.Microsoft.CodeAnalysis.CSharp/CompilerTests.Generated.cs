// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    [TestClass]
    public class CompilerTests
    {
        // Elapsed = 00:00:00.0000142
        [TestMethod]
        public void CompilerTest_0()
        {
			// <PERF>17.0837ms</PERF>

            // (Expression<Func<int>>)(() => 42)
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => 42)");
            var expected = @"<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Constant Type=""System.Int32"" Value=""42"" />
  </Body>
</Lambda>";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.0171319
        [TestMethod]
        public void CompilerTest_1()
        {
			// <PERF>30.0592ms</PERF>

            // (Expression<Func<string, int>>)(s => s.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int>>)(s => s.Length)");
            var expected = @"<Lambda Type=""System.Func`2[System.String,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
    </MemberAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.0472344
		[Ignore]
		// (10,77): error CS0838: An expression tree may not contain a multidimensional array initializer
        [TestMethod]
        public void CompilerTest_2()
        {
			// <PERF>13.5584ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.0608352
		[Ignore]
		// (10,74): error CS0853: An expression tree may not contain a named argument specification
        [TestMethod]
        public void CompilerTest_3()
        {
			// <PERF>14.2839ms</PERF>

            // (Expression<Func<int>>)(() => Math.Abs(value: 42))
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => Math.Abs(value: 42))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.0751736
		[Ignore]
		// (10,79): error CS0853: An expression tree may not contain a named argument specification
        [TestMethod]
        public void CompilerTest_4()
        {
			// <PERF>12.8452ms</PERF>

            // (Expression<Func<TimeSpan>>)(() => new TimeSpan(ticks: 42L))
            var actual = GetDebugView(@"(Expression<Func<TimeSpan>>)(() => new TimeSpan(ticks: 42L))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.0880567
		[Ignore]
		// (10,85): error CS0853: An expression tree may not contain a named argument specification
        [TestMethod]
        public void CompilerTest_5()
        {
			// <PERF>25.8302ms</PERF>

            // (Expression<Func<List<int>, int>>)(xs => xs[index: 42])
            var actual = GetDebugView(@"(Expression<Func<List<int>, int>>)(xs => xs[index: 42])");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.1139387
		[Ignore]
		// (10,83): error CS0853: An expression tree may not contain a named argument specification
        [TestMethod]
        public void CompilerTest_6()
        {
			// <PERF>13.9488ms</PERF>

            // (Expression<Action<Action<int>>>)(a => a(obj: 42))
            var actual = GetDebugView(@"(Expression<Action<Action<int>>>)(a => a(obj: 42))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.1279299
		[Ignore]
		// (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_7()
        {
			// <PERF>21.8554ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => -x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => -x)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.1498228
		[Ignore]
		// (10,108): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_8()
        {
			// <PERF>15.5741ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.1654527
		[Ignore]
		// (10,82): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_9()
        {
			// <PERF>30.4087ms</PERF>

            // (Expression<Func<dynamic, int>>)(x => (int)x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, int>>)(x => (int)x)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.1959042
		[Ignore]
		// (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_10()
        {
			// <PERF>12.1594ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.2081073
		[Ignore]
		// (10,86): error CS1963: An expression tree may not contain a dynamic operation
		// (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_11()
        {
			// <PERF>11.0013ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo(1))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo(1))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.2191417
		[Ignore]
		// (10,86): error CS1963: An expression tree may not contain a dynamic operation
		// (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_12()
        {
			// <PERF>12.0772ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.2312524
		[Ignore]
		// (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_13()
        {
			// <PERF>11.6265ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x[1])");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.2429361
		[Ignore]
		// (10,82): error CS1963: An expression tree may not contain a dynamic operation
		// (10,82): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_14()
        {
			// <PERF>19.7567ms</PERF>

            // (Expression<Func<dynamic, int>>)(x => int.Parse(x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int>>)(x => int.Parse(x))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.2627522
		[Ignore]
		// (10,87): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_15()
        {
			// <PERF>17.6268ms</PERF>

            // (Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.2804410
		[Ignore]
		// (10,85): error CS1989: Async lambda expressions cannot be converted to expression trees
        [TestMethod]
        public void CompilerTest_16()
        {
			// <PERF>19.4577ms</PERF>

            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t)
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.2999465
		[Ignore]
		// (10,85): error CS1989: Async lambda expressions cannot be converted to expression trees
        [TestMethod]
        public void CompilerTest_17()
        {
			// <PERF>20.0812ms</PERF>

            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.3200598
		[Ignore]
		// (10,83): error CS1989: Async lambda expressions cannot be converted to expression trees
		// (10,94): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_18()
        {
			// <PERF>42.9536ms</PERF>

            // (Expression<Func<dynamic, Task<int>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<int>>>)(async d => await d)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.3630736
		[Ignore]
		// (10,82): error CS8072: An expression tree lambda may not contain a null propagating operator.
        [TestMethod]
        public void CompilerTest_19()
        {
			// <PERF>16.1886ms</PERF>

            // (Expression<Func<string, int?>>)(s => s?.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int?>>)(s => s?.Length)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.3793086
		[Ignore]
		// (10,84): error CS8072: An expression tree lambda may not contain a null propagating operator.
        [TestMethod]
        public void CompilerTest_20()
        {
			// <PERF>14.7003ms</PERF>

            // (Expression<Func<string, string>>)(s => s?.ToUpper())
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s?.ToUpper())");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.3940602
		[Ignore]
		// (10,83): error CS8072: An expression tree lambda may not contain a null propagating operator.
        [TestMethod]
        public void CompilerTest_21()
        {
			// <PERF>14.749ms</PERF>

            // (Expression<Func<string, char?>>)(s => s?[42])
            var actual = GetDebugView(@"(Expression<Func<string, char?>>)(s => s?[42])");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.4088556
		[Ignore]
		// (10,90): error CS8072: An expression tree lambda may not contain a null propagating operator.
        [TestMethod]
        public void CompilerTest_22()
        {
			// <PERF>19.6599ms</PERF>

            // (Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))
            var actual = GetDebugView(@"(Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.4285677
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_23()
        {
			// <PERF>12.1464ms</PERF>

            // (Expression<Action>)(() => { })
            var actual = GetDebugView(@"(Expression<Action>)(() => { })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.4407534
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_24()
        {
			// <PERF>12.6212ms</PERF>

            // (Expression<Action>)(() => { ; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ; })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.4534125
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_25()
        {
			// <PERF>11.5186ms</PERF>

            // (Expression<Action>)(() => { return; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { return; })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.4649628
		[Ignore]
		// (10,68): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_26()
        {
			// <PERF>12.523ms</PERF>

            // (Expression<Func<int>>)(() => { return 42; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { return 42; })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.4775247
		[Ignore]
		// (10,84): error CS1525: Invalid expression term '}'
		// (10,84): error CS1002: ; expected
        [TestMethod]
        public void CompilerTest_27()
        {
			// <PERF>15.5923ms</PERF>

            // (Expression<Action>)(() => { goto A; A: })
            var actual = GetDebugView(@"(Expression<Action>)(() => { goto A; A: })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.4932567
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_28()
        {
			// <PERF>20.3141ms</PERF>

            // (Expression<Action>)(() => { A: goto A; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { A: goto A; })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.5136119
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_29()
        {
			// <PERF>15.6865ms</PERF>

            // (Expression<Action>)(() => { while (true) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) Console.Write('.'); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.5293403
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_30()
        {
			// <PERF>84.4667ms</PERF>

            // (Expression<Action>)(() => { do { Console.Write('.'); } while (true); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { do { Console.Write('.'); } while (true); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.6138646
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
		// (10,97): error CS0832: An expression tree may not contain an assignment operator
        [TestMethod]
        public void CompilerTest_31()
        {
			// <PERF>17.7486ms</PERF>

            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.6316712
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_32()
        {
			// <PERF>13.7106ms</PERF>

            // (Expression<Action>)(() => { for (;;) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (;;) Console.Write('.'); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.6454157
		[Ignore]
		// (10,72): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_33()
        {
			// <PERF>13.8787ms</PERF>

            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.6593257
		[Ignore]
		// (10,75): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_34()
        {
			// <PERF>12.216ms</PERF>

            // (Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.6715761
		[Ignore]
		// (10,83): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_35()
        {
			// <PERF>14.6026ms</PERF>

            // (Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.6862211
		[Ignore]
		// (10,78): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_36()
        {
			// <PERF>15.5182ms</PERF>

            // (Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.7017853
		[Ignore]
		// (10,78): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_37()
        {
			// <PERF>16.0274ms</PERF>

            // (Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.7178529
		[Ignore]
		// (10,73): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_38()
        {
			// <PERF>18.1038ms</PERF>

            // (Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.7360009
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_39()
        {
			// <PERF>46.7865ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.7828302
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_40()
        {
			// <PERF>15.7227ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.7985823
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_41()
        {
			// <PERF>16.6352ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.8152626
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_42()
        {
			// <PERF>19.3471ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.8346557
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_43()
        {
			// <PERF>17.9298ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) when (e != null) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) when (e != null) { Console.WriteLine(e); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.8526270
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_44()
        {
			// <PERF>17.8869ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.8705684
		[Ignore]
		// (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_45()
        {
			// <PERF>18.7196ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.8893228
		[Ignore]
		// (10,70): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_46()
        {
			// <PERF>11.5985ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) {} })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) {} })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.9009583
		[Ignore]
		// (10,70): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_47()
        {
			// <PERF>60.999ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.9620104
		[Ignore]
		// (10,70): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_48()
        {
			// <PERF>24.2884ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:00.9863497
		[Ignore]
		// (10,70): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_49()
        {
			// <PERF>31.9603ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:01.0183555
		[Ignore]
		// (10,71): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_50()
        {
			// <PERF>15.2344ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:01.0336216
		[Ignore]
		// (10,71): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_51()
        {
			// <PERF>18.3984ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: goto case null; case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: goto case null; case null: Console.Write('N'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:01.0520713
		[Ignore]
		// (10,71): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_52()
        {
			// <PERF>17.9294ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

        // Elapsed = 00:00:01.0700323
		[Ignore]
		// (10,71): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_53()
        {
			// <PERF>13.8618ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
        }

    }
}