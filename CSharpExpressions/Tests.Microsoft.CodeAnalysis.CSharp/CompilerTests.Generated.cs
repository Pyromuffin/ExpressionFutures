// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    [TestClass]
    public partial class CompilerTests
    {
        // Elapsed = 00:00:00.9447120
        [TestMethod]
        public void CompilerTest_9D30_AA02()
        {
            // <PERF>1995.2859ms</PERF>

            // (Expression<Func<int>>)(() => 42)
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => 42)");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Constant Type=""System.Int32"" Value=""42"" />
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9D30_AA02();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9D30_AA02() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.9410533
        [TestMethod]
        public void CompilerTest_3ECF_6910()
        {
            // <PERF>245.0928ms</PERF>

            // (Expression<Func<string, int>>)(s => s.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int>>)(s => s.Length)");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
    </MemberAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3ECF_6910();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3ECF_6910() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.1862215
        [TestMethod]
        public void CompilerTest_F51F_71B6()
        {
            // <PERF>39.9646ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""1, 1"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""42"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F51F_71B6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F51F_71B6() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.2262437
        [TestMethod]
        public void CompilerTest_E70E_4B35()
        {
            // <PERF>33.6828ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[1, 2] { { 42, 43 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[1, 2] { { 42, 43 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""1, 2"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""42"" />
        <Constant Type=""System.Int32"" Value=""43"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E70E_4B35();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E70E_4B35() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.2599738
        [TestMethod]
        public void CompilerTest_59A0_FFB9()
        {
            // <PERF>21.7377ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[2, 1] { { 42 }, { 43 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[2, 1] { { 42 }, { 43 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""2, 1"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""42"" />
        <Constant Type=""System.Int32"" Value=""43"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_59A0_FFB9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_59A0_FFB9() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.2817855
        [TestMethod]
        public void CompilerTest_789A_453A()
        {
            // <PERF>39.6987ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[2, 2] { { 41, 42 }, { 43, 44 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[2, 2] { { 41, 42 }, { 43, 44 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""2, 2"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""41"" />
        <Constant Type=""System.Int32"" Value=""42"" />
        <Constant Type=""System.Int32"" Value=""43"" />
        <Constant Type=""System.Int32"" Value=""44"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_789A_453A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_789A_453A() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.3215391
        [TestMethod]
        public void CompilerTest_E9F4_7C15()
        {
            // <PERF>24.5914ms</PERF>

            // (Expression<Func<int>>)(() => Math.Abs(value: 42))
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => Math.Abs(value: 42))");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <CSharpCall Type=""System.Int32"" Method=""Int32 Abs(Int32)"">
      <Arguments>
        <ParameterAssignment Parameter=""Int32 value"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E9F4_7C15();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E9F4_7C15() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.3461769
        [TestMethod]
        public void CompilerTest_4EB1_83FD()
        {
            // <PERF>34.482ms</PERF>

            // (Expression<Func<string, string>>)(s => s.Substring(startIndex: 42))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(startIndex: 42))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4EB1_83FD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4EB1_83FD() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.3807245
        [TestMethod]
        public void CompilerTest_C437_AA4C()
        {
            // <PERF>25.5027ms</PERF>

            // (Expression<Func<string, string>>)(s => s.Substring(startIndex: 42, length: 43))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(startIndex: 42, length: 43))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32, Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Int32 length"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""43"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C437_AA4C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C437_AA4C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.4062785
        [TestMethod]
        public void CompilerTest_4C39_BCFC()
        {
            // <PERF>37.7294ms</PERF>

            // (Expression<Func<string, string>>)(s => s.Substring(length: 43, startIndex: 42))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(length: 43, startIndex: 42))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32, Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 length"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""43"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4C39_BCFC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4C39_BCFC() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.4440632
        [TestMethod]
        public void CompilerTest_EDEC_D0C9()
        {
            // <PERF>33.752ms</PERF>

            // (Expression<Func<List<int>, int>>)(xs => xs[index: 42])
            var actual = GetDebugView(@"(Expression<Func<List<int>, int>>)(xs => xs[index: 42])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIndex Type=""System.Int32"" Indexer=""Int32 Item [Int32]"">
      <Object>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 index"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EDEC_D0C9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EDEC_D0C9() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.4778919
        [TestMethod]
        public void CompilerTest_6271_EABC()
        {
            // <PERF>25.0756ms</PERF>

            // (Expression<Action<Action<int>>>)(a => a(obj: 42))
            var actual = GetDebugView(@"(Expression<Action<Action<int>>>)(a => a(obj: 42))");
            var expected = @"
<Lambda Type=""System.Action`1[System.Action`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Action`1[System.Int32]"" Id=""0"" Name=""a"" />
  </Parameters>
  <Body>
    <CSharpInvoke Type=""System.Void"">
      <Expression>
        <Parameter Type=""System.Action`1[System.Int32]"" Id=""0"" Name=""a"" />
      </Expression>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 obj"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6271_EABC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6271_EABC() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.5032928
        [TestMethod]
        public void CompilerTest_053A_671C()
        {
            // <PERF>26.1158ms</PERF>

            // (Expression<Action<Action<string, int, bool>>>)(a => a(arg2: 42, arg1: "foo", arg3: false))
            var actual = GetDebugView(@"(Expression<Action<Action<string, int, bool>>>)(a => a(arg2: 42, arg1: ""foo"", arg3: false))");
            var expected = @"
<Lambda Type=""System.Action`1[System.Action`3[System.String,System.Int32,System.Boolean]]"">
  <Parameters>
    <Parameter Type=""System.Action`3[System.String,System.Int32,System.Boolean]"" Id=""0"" Name=""a"" />
  </Parameters>
  <Body>
    <CSharpInvoke Type=""System.Void"">
      <Expression>
        <Parameter Type=""System.Action`3[System.String,System.Int32,System.Boolean]"" Id=""0"" Name=""a"" />
      </Expression>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 arg2"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""System.String arg1"">
          <Expression>
            <Constant Type=""System.String"" Value=""foo"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Boolean arg3"">
          <Expression>
            <Constant Type=""System.Boolean"" Value=""false"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_053A_671C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_053A_671C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.5294675
        [TestMethod]
        public void CompilerTest_B473_5F62()
        {
            // <PERF>24.0688ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => +x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => +x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""UnaryPlus"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B473_5F62();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B473_5F62() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.5536001
        [TestMethod]
        public void CompilerTest_8E43_6B25()
        {
            // <PERF>22.3584ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => -x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => -x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""Negate"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8E43_6B25();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8E43_6B25() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.5760344
        [TestMethod]
        public void CompilerTest_CE27_211A()
        {
            // <PERF>26.1068ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => !x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => !x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""Not"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CE27_211A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CE27_211A() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.6022122
        [TestMethod]
        public void CompilerTest_EA86_0AAE()
        {
            // <PERF>25.7213ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => ~x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => ~x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""OnesComplement"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EA86_0AAE();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EA86_0AAE() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.6279821
        [TestMethod]
        public void CompilerTest_7005_E877()
        {
            // <PERF>40.3123ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => checked(-x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => checked(-x))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""Negate"" Flags=""CheckedContext"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7005_E877();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7005_E877() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.6683466
        [TestMethod]
        public void CompilerTest_775D_E1DB()
        {
            // <PERF>20.3538ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a + b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a + b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Add"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_775D_E1DB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_775D_E1DB() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.6887557
        [TestMethod]
        public void CompilerTest_84B6_6376()
        {
            // <PERF>56.5535ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a - b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a - b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Subtract"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_84B6_6376();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_84B6_6376() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.7453619
        [TestMethod]
        public void CompilerTest_754C_C121()
        {
            // <PERF>21.9875ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a * b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a * b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Multiply"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_754C_C121();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_754C_C121() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.7674204
        [TestMethod]
        public void CompilerTest_6E28_DBCA()
        {
            // <PERF>35.1393ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a / b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a / b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Divide"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6E28_DBCA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6E28_DBCA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.8026356
        [TestMethod]
        public void CompilerTest_A085_4C3D()
        {
            // <PERF>23.6529ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a % b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a % b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Modulo"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A085_4C3D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A085_4C3D() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.8263434
        [TestMethod]
        public void CompilerTest_DE17_40A5()
        {
            // <PERF>33.1714ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a & b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a & b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""And"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DE17_40A5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DE17_40A5() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.8595701
        [TestMethod]
        public void CompilerTest_5CD0_0AE2()
        {
            // <PERF>23.8074ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a | b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a | b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Or"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5CD0_0AE2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5CD0_0AE2() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.8835323
        [TestMethod]
        public void CompilerTest_0C84_0C91()
        {
            // <PERF>25.4545ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a ^ b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a ^ b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""ExclusiveOr"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0C84_0C91();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0C84_0C91() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.9096155
        [TestMethod]
        public void CompilerTest_FF88_BC1C()
        {
            // <PERF>26.5045ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a < b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a < b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""LessThan"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FF88_BC1C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FF88_BC1C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.9361954
        [TestMethod]
        public void CompilerTest_F2A3_DCF3()
        {
            // <PERF>25.2572ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a <= b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a <= b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""LessThanOrEqual"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F2A3_DCF3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F2A3_DCF3() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.9615044
        [TestMethod]
        public void CompilerTest_3DBC_7187()
        {
            // <PERF>24.7069ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a > b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a > b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""GreaterThan"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3DBC_7187();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3DBC_7187() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.9862961
        [TestMethod]
        public void CompilerTest_5002_22B5()
        {
            // <PERF>40.9071ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a >= b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a >= b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""GreaterThanOrEqual"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5002_22B5();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5002_22B5() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.0272559
        [TestMethod]
        public void CompilerTest_1A1B_4504()
        {
            // <PERF>26.4884ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a == b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a == b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Equal"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1A1B_4504();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1A1B_4504() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.0538010
        [TestMethod]
        public void CompilerTest_8DF7_1EFB()
        {
            // <PERF>23.6533ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a != b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a != b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""NotEqual"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8DF7_1EFB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8DF7_1EFB() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.0775070
        [TestMethod]
        public void CompilerTest_5F46_EC7B()
        {
            // <PERF>25.2652ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a << b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a << b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""LeftShift"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5F46_EC7B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5F46_EC7B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.1028329
        [TestMethod]
        public void CompilerTest_106F_B1CC()
        {
            // <PERF>27.0993ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a >> b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a >> b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""RightShift"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_106F_B1CC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_106F_B1CC() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.1300175
        [TestMethod]
        public void CompilerTest_2275_966C()
        {
            // <PERF>26.9221ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a && b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a && b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""And"" Flags=""BinaryOperationLogical"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2275_966C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2275_966C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.1570052
        [TestMethod]
        public void CompilerTest_FB20_C3F6()
        {
            // <PERF>64.9045ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a || b)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => a || b)");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Or"" Flags=""BinaryOperationLogical"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FB20_C3F6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FB20_C3F6() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.2219950
        [TestMethod]
        public void CompilerTest_191C_CEEB()
        {
            // <PERF>30.3373ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Add"" Flags=""CheckedContext"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_191C_CEEB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_191C_CEEB() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.2524157
        [TestMethod]
        public void CompilerTest_6647_1258()
        {
            // <PERF>23.4758ms</PERF>

            // (Expression<Func<dynamic, int>>)(x => (int)x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, int>>)(x => (int)x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.Int32"" Flags=""ConvertExplicit"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6647_1258();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6647_1258() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.2759651
        [TestMethod]
        public void CompilerTest_93FA_3B2C()
        {
            // <PERF>28.8473ms</PERF>

            // (Expression<Func<dynamic, string>>)(x => (string)x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, string>>)(x => (string)x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.String]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.String"" Flags=""ConvertExplicit"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_93FA_3B2C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_93FA_3B2C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.3048757
        [TestMethod]
        public void CompilerTest_8FB3_87A6()
        {
            // <PERF>34.7431ms</PERF>

            // (Expression<Func<dynamic, object>>)(x => (object)x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, object>>)(x => (object)x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <Convert Type=""System.Object"">
      <Operand>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Operand>
    </Convert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8FB3_87A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8FB3_87A6() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.3397005
        [TestMethod]
        public void CompilerTest_AB76_B2ED()
        {
            // <PERF>22.652ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
    </CSharpDynamicGetMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AB76_B2ED();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AB76_B2ED() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.3624047
        [TestMethod]
        public void CompilerTest_14B0_8F1F()
        {
            // <PERF>65.8756ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo())
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo())");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments />
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_14B0_8F1F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_14B0_8F1F() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.4283294
        [TestMethod]
        public void CompilerTest_ABB7_09A0()
        {
            // <PERF>29.6264ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo(1, 2))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo(1, 2))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""2"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_ABB7_09A0();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_ABB7_09A0() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.4580165
        [TestMethod]
        public void CompilerTest_647C_869C()
        {
            // <PERF>28.0877ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo(x: 1, y: 2))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo(x: 1, y: 2))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""x"" Flags=""UseCompileTimeType, Constant, NamedArgument"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
        <DynamicCSharpArgument Name=""y"" Flags=""UseCompileTimeType, Constant, NamedArgument"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""2"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_647C_869C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_647C_869C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.4861895
        [TestMethod]
        public void CompilerTest_A62F_E0EA()
        {
            // <PERF>43.8224ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo<int>())
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo<int>())");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" TypeArguments=""System.Int32"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments />
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A62F_E0EA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A62F_E0EA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.5300704
        [TestMethod]
        public void CompilerTest_6E0D_C117()
        {
            // <PERF>23.8649ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo<int, bool>())
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo<int, bool>())");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" TypeArguments=""System.Int32, System.Boolean"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments />
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6E0D_C117();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6E0D_C117() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.5539911
        [TestMethod]
        public void CompilerTest_9AE8_6C9F()
        {
            // <PERF>22.9451ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9AE8_6C9F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9AE8_6C9F() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.5770067
        [TestMethod]
        public void CompilerTest_2069_9E36()
        {
            // <PERF>46.5067ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(y: y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(y: y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""y"" Flags=""UseCompileTimeType, NamedArgument"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2069_9E36();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2069_9E36() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.6235781
        [TestMethod]
        public void CompilerTest_4C1E_1B45()
        {
            // <PERF>25.1617ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(ref y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(ref y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, IsRef"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4C1E_1B45();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4C1E_1B45() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.6488192
        [TestMethod]
        public void CompilerTest_5D0B_BB53()
        {
            // <PERF>25.3411ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(a: ref y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(a: ref y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsRef"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5D0B_BB53();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5D0B_BB53() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.6742139
        [TestMethod]
        public void CompilerTest_644B_2D72()
        {
            // <PERF>25.2942ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(out y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(out y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, IsOut"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_644B_2D72();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_644B_2D72() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.6995982
        [TestMethod]
        public void CompilerTest_3B77_970B()
        {
            // <PERF>31.7854ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(a: out y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo(a: out y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsOut"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3B77_970B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3B77_970B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.7314635
        [TestMethod]
        public void CompilerTest_3418_D0D2()
        {
            // <PERF>45.6735ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3418_D0D2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3418_D0D2() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.7772168
        [TestMethod]
        public void CompilerTest_0946_2AB1()
        {
            // <PERF>24.0158ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(y: y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(y: y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""y"" Flags=""NamedArgument"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0946_2AB1();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0946_2AB1() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.8013147
        [TestMethod]
        public void CompilerTest_1B29_3F4D()
        {
            // <PERF>26.6459ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(ref y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(ref y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, IsRef"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1B29_3F4D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1B29_3F4D() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.8280436
        [TestMethod]
        public void CompilerTest_EEB8_ED24()
        {
            // <PERF>25.2063ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(a: ref y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(a: ref y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsRef"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EEB8_ED24();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EEB8_ED24() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.8533316
        [TestMethod]
        public void CompilerTest_7349_817B()
        {
            // <PERF>25.2175ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(out y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(out y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, IsOut"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7349_817B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7349_817B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.8786231
        [TestMethod]
        public void CompilerTest_76D5_13EF()
        {
            // <PERF>25.7963ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(a: out y))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((x, y) => x.Foo(a: out y))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument, IsOut"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_76D5_13EF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_76D5_13EF() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.9044872
        [TestMethod]
        public void CompilerTest_55B7_3EFA()
        {
            // <PERF>73.7711ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
          <Object>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Object>
        </CSharpDynamicGetMember>
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_55B7_3EFA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_55B7_3EFA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.9783096
        [TestMethod]
        public void CompilerTest_7760_936B()
        {
            // <PERF>25.3447ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x[1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7760_936B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7760_936B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.0037301
        [TestMethod]
        public void CompilerTest_7FDD_6511()
        {
            // <PERF>25.0591ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo[a: 1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo[a: 1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
          <Object>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Object>
        </CSharpDynamicGetMember>
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, Constant, NamedArgument"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7FDD_6511();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7FDD_6511() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.0288566
        [TestMethod]
        public void CompilerTest_D809_C13E()
        {
            // <PERF>26.193ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x[a: 1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x[a: 1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, Constant, NamedArgument"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D809_C13E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D809_C13E() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.0551018
        [TestMethod]
        public void CompilerTest_9998_022C()
        {
            // <PERF>23.8983ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo[y])
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo[y])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
          <Object>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Object>
        </CSharpDynamicGetMember>
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9998_022C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9998_022C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.0790550
        [TestMethod]
        public void CompilerTest_F77D_040F()
        {
            // <PERF>22.1103ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x[y])
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x[y])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F77D_040F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F77D_040F() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.1012376
        [TestMethod]
        public void CompilerTest_604B_718E()
        {
            // <PERF>45.4878ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo[a: y])
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x.Foo[a: y])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
          <Object>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Object>
        </CSharpDynamicGetMember>
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_604B_718E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_604B_718E() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.1467790
        [TestMethod]
        public void CompilerTest_D83C_2D6C()
        {
            // <PERF>24.6596ms</PERF>

            // (Expression<Func<dynamic, int, dynamic>>)((x, y) => x[a: y])
            var actual = GetDebugView(@"(Expression<Func<dynamic, int, dynamic>>)((x, y) => x[a: y])");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Int32,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
    <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Name=""a"" Flags=""UseCompileTimeType, NamedArgument"">
          <Expression>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_D83C_2D6C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_D83C_2D6C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.1714953
        [TestMethod]
        public void CompilerTest_F586_7D7E()
        {
            // <PERF>40.1628ms</PERF>

            // (Expression<Func<string, dynamic, dynamic>>)((s, i) => s[i])
            var actual = GetDebugView(@"(Expression<Func<string, dynamic, dynamic>>)((s, i) => s[i])");
            var expected = @"
<Lambda Type=""System.Func`3[System.String,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""i"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""i"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F586_7D7E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F586_7D7E() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.2117531
        [TestMethod]
        public void CompilerTest_22AA_5962()
        {
            // <PERF>33.3848ms</PERF>

            // (Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.TimeSpan]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeConstructor Type=""System.TimeSpan"" Context=""Expressions"">
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeConstructor>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_22AA_5962();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_22AA_5962() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.2451923
        [TestMethod]
        public void CompilerTest_0FFA_7AF2()
        {
            // <PERF>24.6119ms</PERF>

            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t)
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Int32]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Int32"" GetAwaiterMethod=""System.Runtime.CompilerServices.TaskAwaiter`1[System.Int32] GetAwaiter()"">
              <Operand>
                <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0FFA_7AF2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0FFA_7AF2() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.2699149
        [TestMethod]
        public void CompilerTest_83AE_26E4()
        {
            // <PERF>25.5468ms</PERF>

            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Int32]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Int32"" GetAwaiterMethod=""ConfiguredTaskAwaiter GetAwaiter()"">
              <Operand>
                <Call Type=""System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1[System.Int32]"" Method=""System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1[System.Int32] ConfigureAwait(Boolean)"">
                  <Object>
                    <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
                  </Object>
                  <Arguments>
                    <Constant Type=""System.Boolean"" Value=""false"" />
                  </Arguments>
                </Call>
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_83AE_26E4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_83AE_26E4() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.2955282
        [TestMethod]
        public void CompilerTest_4DC5_243C()
        {
            // <PERF>45.8386ms</PERF>

            // (Expression<Func<dynamic, Task<dynamic>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<dynamic>>>)(async d => await d)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Object]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
          <Parameters>
            <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Object"" IsDynamic=""true"">
              <Operand>
                <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4DC5_243C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4DC5_243C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.3414284
        [TestMethod]
        public void CompilerTest_5DFD_243C()
        {
            // <PERF>24.2161ms</PERF>

            // (Expression<Func<dynamic, Task<object>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<object>>>)(async d => await d)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Object]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
          <Parameters>
            <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Object"" IsDynamic=""true"">
              <Operand>
                <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5DFD_243C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5DFD_243C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.3657235
        [TestMethod]
        public void CompilerTest_1A0E_F439()
        {
            // <PERF>23.7872ms</PERF>

            // (Expression<Func<dynamic, Task<int>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<int>>>)(async d => await d)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Int32]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
          </Parameters>
          <Body>
            <CSharpDynamicConvert Type=""System.Int32"" Context=""Expressions"">
              <Expression>
                <CSharpAwait Type=""System.Object"" IsDynamic=""true"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
                  </Operand>
                </CSharpAwait>
              </Expression>
            </CSharpDynamicConvert>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1A0E_F439();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1A0E_F439() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.3895665
        [TestMethod]
        public void CompilerTest_B340_DAC2()
        {
            // <PERF>24.3241ms</PERF>

            // (Expression<Func<string, int?>>)(s => s?.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int?>>)(s => s?.Length)");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalMemberAccess Type=""System.Nullable`1[System.Int32]"" Member=""Int32 Length"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
    </CSharpConditionalMemberAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B340_DAC2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B340_DAC2() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.4139709
        [TestMethod]
        public void CompilerTest_A997_3059()
        {
            // <PERF>30.0584ms</PERF>

            // (Expression<Func<string, string>>)(s => s?.ToUpper())
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s?.ToUpper())");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalCall Type=""System.String"" Method=""System.String ToUpper()"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments />
    </CSharpConditionalCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A997_3059();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A997_3059() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.4441145
        [TestMethod]
        public void CompilerTest_CF40_3016()
        {
            // <PERF>25.2068ms</PERF>

            // (Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))
            var actual = GetDebugView(@"(Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Func`2[System.Int32,System.Int32],System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Func`2[System.Int32,System.Int32]"" Id=""0"" Name=""f"" />
  </Parameters>
  <Body>
    <CSharpConditionalCall Type=""System.Nullable`1[System.Int32]"" Method=""Int32 Invoke(Int32)"">
      <Object>
        <Parameter Type=""System.Func`2[System.Int32,System.Int32]"" Id=""0"" Name=""f"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 arg"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpConditionalCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CF40_3016();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CF40_3016() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.4693775
        [TestMethod]
        public void CompilerTest_A8D0_49C3()
        {
            // <PERF>78.8204ms</PERF>

            // (Expression<Action>)(() => { })
            var actual = GetDebugView(@"(Expression<Action>)(() => { })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements />
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A8D0_49C3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A8D0_49C3() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.5482733
        [TestMethod]
        public void CompilerTest_197A_9EF8()
        {
            // <PERF>49.0676ms</PERF>

            // (Expression<Action>)(() => { int x; x = 5; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int x; x = 5; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <Assign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""5"" />
          </Right>
        </Assign>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_197A_9EF8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_197A_9EF8() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.5974074
        [TestMethod]
        public void CompilerTest_27AA_544E()
        {
            // <PERF>67.051ms</PERF>

            // (Expression<Action>)(() => { int x; x = 5; { int y = x + 1; Console.WriteLine(y); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int x; x = 5; { int y = x + 1; Console.WriteLine(y); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <Assign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""5"" />
          </Right>
        </Assign>
        <Block Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Variables>
          <Expressions>
            <Assign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
              </Left>
              <Right>
                <Add Type=""System.Int32"">
                  <Left>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
                  </Left>
                  <Right>
                    <Constant Type=""System.Int32"" Value=""1"" />
                  </Right>
                </Add>
              </Right>
            </Assign>
            <Call Type=""System.Void"" Method=""Void WriteLine(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
              </Arguments>
            </Call>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_27AA_544E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_27AA_544E() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.6645196
        [TestMethod]
        public void CompilerTest_0BD6_C135()
        {
            // <PERF>21.726ms</PERF>

            // (Expression<Action>)(() => { ; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Default Type=""System.Void"" />
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0BD6_C135();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0BD6_C135() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.6862934
        [TestMethod]
        public void CompilerTest_7F95_E445()
        {
            // <PERF>22.6555ms</PERF>

            // (Expression<Action>)(() => { ;; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ;; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Default Type=""System.Void"" />
        <Default Type=""System.Void"" />
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7F95_E445();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7F95_E445() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.7089980
        [TestMethod]
        public void CompilerTest_6102_7F8E()
        {
            // <PERF>24.5646ms</PERF>

            // (Expression<Action>)(() => { return; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { return; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Goto Type=""System.Void"" Kind=""Return"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </Target>
        </Goto>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6102_7F8E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6102_7F8E() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.7336398
        [TestMethod]
        public void CompilerTest_AEF8_9F07()
        {
            // <PERF>46.4839ms</PERF>

            // (Expression<Func<int>>)(() => { int x = 42; return x; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { int x = 42; return x; })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Int32"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <Assign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Right>
        </Assign>
        <Goto Type=""System.Void"" Kind=""Return"">
          <Target>
            <LabelTarget Type=""System.Int32"" Id=""1"" />
          </Target>
          <Value>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Value>
        </Goto>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Int32"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AEF8_9F07();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AEF8_9F07() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.7802040
        [TestMethod]
        public void CompilerTest_7381_AA02()
        {
            // <PERF>21.0308ms</PERF>

            // (Expression<Func<int>>)(() => { return 42; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { return 42; })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Constant Type=""System.Int32"" Value=""42"" />
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7381_AA02();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7381_AA02() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.8012973
        [TestMethod]
        public void CompilerTest_BBBC_A048()
        {
            // <PERF>43.5971ms</PERF>

            // (Expression<Action>)(() => { goto A; A: Console.Write('A'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { goto A; A: Console.Write('A'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpGoto Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </CSharpGoto>
        <Label Type=""System.Void"" />
        <Call Type=""System.Void"" Method=""Void Write(Char)"">
          <Arguments>
            <Constant Type=""System.Char"" Value=""A"" />
          </Arguments>
        </Call>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BBBC_A048();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BBBC_A048() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.8449832
        [TestMethod]
        public void CompilerTest_6FC7_B707()
        {
            // <PERF>32.5016ms</PERF>

            // (Expression<Action>)(() => { A: Console.Write('A'); goto A; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { A: Console.Write('A'); goto A; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <Label Type=""System.Void"" />
        <Call Type=""System.Void"" Method=""Void Write(Char)"">
          <Arguments>
            <Constant Type=""System.Char"" Value=""A"" />
          </Arguments>
        </Call>
        <CSharpGoto Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </CSharpGoto>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6FC7_B707();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6FC7_B707() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.8775428
        [TestMethod]
        public void CompilerTest_C90B_9C05()
        {
            // <PERF>35.9984ms</PERF>

            // (Expression<Action>)(() => { while (true) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C90B_9C05();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C90B_9C05() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.9135970
        [TestMethod]
        public void CompilerTest_6674_1E31()
        {
            // <PERF>33.5328ms</PERF>

            // (Expression<Action>)(() => { do { Console.Write('.'); } while (true); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { do { Console.Write('.'); } while (true); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpDo Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpDo>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6674_1E31();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6674_1E31() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.9471820
        [TestMethod]
        public void CompilerTest_AD48_8B6A()
        {
            // <PERF>47.5951ms</PERF>

            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Variables>
          <Initializers>
            <Assign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </Assign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <PostIncrementAssign Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Operand>
            </PostIncrementAssign>
          </Iterators>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD48_8B6A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD48_8B6A() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.9948458
        [TestMethod]
        public void CompilerTest_25E2_35E6()
        {
            // <PERF>31.261ms</PERF>

            // (Expression<Action>)(() => { for (;;) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (;;) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpFor Type=""System.Void"">
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpFor>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_25E2_35E6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_25E2_35E6() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.0261679
        [TestMethod]
        public void CompilerTest_DA7B_B67A()
        {
            // <PERF>30.3793ms</PERF>

            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32[]]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Collection>
            <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DA7B_B67A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DA7B_B67A() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.0566052
        [TestMethod]
        public void CompilerTest_34B8_D672()
        {
            // <PERF>28.7022ms</PERF>

            // (Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object[]]"">
  <Parameters>
    <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""2"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""2"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_34B8_D672();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_34B8_D672() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.0853931
        [TestMethod]
        public void CompilerTest_5598_03A6()
        {
            // <PERF>30.5073ms</PERF>

            // (Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5598_03A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5598_03A6() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.1159879
        [TestMethod]
        public void CompilerTest_BB7C_2A2A()
        {
            // <PERF>75.9291ms</PERF>

            // (Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
          </Variable>
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
              <Arguments>
                <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
              </Arguments>
            </Call>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BB7C_2A2A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BB7C_2A2A() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.1919893
        [TestMethod]
        public void CompilerTest_2CF2_18B2()
        {
            // <PERF>37.7119ms</PERF>

            // (Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpLock Type=""System.Void"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
          </Expression>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpLock>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2CF2_18B2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2CF2_18B2() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.2297740
        [TestMethod]
        public void CompilerTest_880F_A24B()
        {
            // <PERF>28.8303ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Finally>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Finally>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_880F_A24B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_880F_A24B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.2586574
        [TestMethod]
        public void CompilerTest_19B3_485B()
        {
            // <PERF>28.5505ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""C"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_19B3_485B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_19B3_485B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.2872869
        [TestMethod]
        public void CompilerTest_0662_485B()
        {
            // <PERF>29.7205ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""C"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0662_485B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0662_485B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.3170896
        [TestMethod]
        public void CompilerTest_F63E_8707()
        {
            // <PERF>55.5739ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F63E_8707();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F63E_8707() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.3727536
        [TestMethod]
        public void CompilerTest_1C02_6E0D()
        {
            // <PERF>28.979ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.InvalidOperationException"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""I"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
            <CatchBlock Test=""System.OverflowException"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""O"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1C02_6E0D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1C02_6E0D() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.4018214
        [TestMethod]
        public void CompilerTest_744C_C5E7()
        {
            // <PERF>36.2206ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
          <Finally>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Finally>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_744C_C5E7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_744C_C5E7() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.4381352
        [TestMethod]
        public void CompilerTest_2156_D7F7()
        {
            // <PERF>25.5348ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) {} })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) {} })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases />
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2156_D7F7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2156_D7F7() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.4637195
        [TestMethod]
        public void CompilerTest_FCA9_3B3F()
        {
            // <PERF>31.6903ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""0"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FCA9_3B3F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FCA9_3B3F() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.4954741
        [TestMethod]
        public void CompilerTest_6832_C62D()
        {
            // <PERF>59.0342ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0, 1"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""A"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6832_C62D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6832_C62D() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.5545756
        [TestMethod]
        public void CompilerTest_4E9F_42FD()
        {
            // <PERF>32.7841ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""A"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""D"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4E9F_42FD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4E9F_42FD() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.5874512
        [TestMethod]
        public void CompilerTest_30E5_8D77()
        {
            // <PERF>62.3917ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0, null"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_30E5_8D77();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_30E5_8D77() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.6499148
        [TestMethod]
        public void CompilerTest_AD7C_9EAF()
        {
            // <PERF>28.8655ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <CSharpGoto Type=""System.Void"" Value=""0"" />
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD7C_9EAF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD7C_9EAF() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.6788557
        [TestMethod]
        public void CompilerTest_3E56_D0C6()
        {
            // <PERF>32.2955ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <CSharpGoto Type=""System.Void"" />
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3E56_D0C6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3E56_D0C6() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { Assert.Inconclusive(); }
        }

        partial class Reviewed : Review
        {
            private void OK() {}
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests
    {
        partial class Reviewed
        {
            public override void CompilerTest_9D30_AA02 => OK();
            public override void CompilerTest_3ECF_6910 => OK();
            public override void CompilerTest_F51F_71B6 => OK();
            public override void CompilerTest_E70E_4B35 => OK();
            public override void CompilerTest_59A0_FFB9 => OK();
            public override void CompilerTest_789A_453A => OK();
            public override void CompilerTest_E9F4_7C15 => OK();
            public override void CompilerTest_4EB1_83FD => OK();
            public override void CompilerTest_C437_AA4C => OK();
            public override void CompilerTest_4C39_BCFC => OK();
            public override void CompilerTest_EDEC_D0C9 => OK();
            public override void CompilerTest_6271_EABC => OK();
            public override void CompilerTest_053A_671C => OK();
            public override void CompilerTest_B473_5F62 => OK();
            public override void CompilerTest_8E43_6B25 => OK();
            public override void CompilerTest_CE27_211A => OK();
            public override void CompilerTest_EA86_0AAE => OK();
            public override void CompilerTest_7005_E877 => OK();
            public override void CompilerTest_775D_E1DB => OK();
            public override void CompilerTest_84B6_6376 => OK();
            public override void CompilerTest_754C_C121 => OK();
            public override void CompilerTest_6E28_DBCA => OK();
            public override void CompilerTest_A085_4C3D => OK();
            public override void CompilerTest_DE17_40A5 => OK();
            public override void CompilerTest_5CD0_0AE2 => OK();
            public override void CompilerTest_0C84_0C91 => OK();
            public override void CompilerTest_FF88_BC1C => OK();
            public override void CompilerTest_F2A3_DCF3 => OK();
            public override void CompilerTest_3DBC_7187 => OK();
            public override void CompilerTest_5002_22B5 => OK();
            public override void CompilerTest_1A1B_4504 => OK();
            public override void CompilerTest_8DF7_1EFB => OK();
            public override void CompilerTest_5F46_EC7B => OK();
            public override void CompilerTest_106F_B1CC => OK();
            public override void CompilerTest_2275_966C => OK();
            public override void CompilerTest_FB20_C3F6 => OK();
            public override void CompilerTest_191C_CEEB => OK();
            public override void CompilerTest_6647_1258 => OK();
            public override void CompilerTest_93FA_3B2C => OK();
            public override void CompilerTest_8FB3_87A6 => OK();
            public override void CompilerTest_AB76_B2ED => OK();
            public override void CompilerTest_14B0_8F1F => OK();
            public override void CompilerTest_ABB7_09A0 => OK();
            public override void CompilerTest_647C_869C => OK();
            public override void CompilerTest_A62F_E0EA => OK();
            public override void CompilerTest_6E0D_C117 => OK();
            public override void CompilerTest_9AE8_6C9F => OK();
            public override void CompilerTest_2069_9E36 => OK();
            public override void CompilerTest_4C1E_1B45 => OK();
            public override void CompilerTest_5D0B_BB53 => OK();
            public override void CompilerTest_644B_2D72 => OK();
            public override void CompilerTest_3B77_970B => OK();
            public override void CompilerTest_3418_D0D2 => OK();
            public override void CompilerTest_0946_2AB1 => OK();
            public override void CompilerTest_1B29_3F4D => OK();
            public override void CompilerTest_EEB8_ED24 => OK();
            public override void CompilerTest_7349_817B => OK();
            public override void CompilerTest_76D5_13EF => OK();
            public override void CompilerTest_55B7_3EFA => OK();
            public override void CompilerTest_7760_936B => OK();
            public override void CompilerTest_7FDD_6511 => OK();
            public override void CompilerTest_D809_C13E => OK();
            public override void CompilerTest_9998_022C => OK();
            public override void CompilerTest_F77D_040F => OK();
            public override void CompilerTest_604B_718E => OK();
            public override void CompilerTest_D83C_2D6C => OK();
            public override void CompilerTest_F586_7D7E => OK();
            public override void CompilerTest_22AA_5962 => OK();
            public override void CompilerTest_0FFA_7AF2 => OK();
            public override void CompilerTest_83AE_26E4 => OK();
            public override void CompilerTest_4DC5_243C => OK();
            public override void CompilerTest_5DFD_243C => OK();
            public override void CompilerTest_1A0E_F439 => OK();
            public override void CompilerTest_B340_DAC2 => OK();
            public override void CompilerTest_A997_3059 => OK();
            public override void CompilerTest_CF40_3016 => OK();
            public override void CompilerTest_A8D0_49C3 => OK();
            public override void CompilerTest_197A_9EF8 => OK();
            public override void CompilerTest_27AA_544E => OK();
            public override void CompilerTest_0BD6_C135 => OK();
            public override void CompilerTest_7F95_E445 => OK();
            public override void CompilerTest_6102_7F8E => OK();
            public override void CompilerTest_AEF8_9F07 => OK();
            public override void CompilerTest_7381_AA02 => OK();
            public override void CompilerTest_BBBC_A048 => OK();
            public override void CompilerTest_6FC7_B707 => OK();
            public override void CompilerTest_C90B_9C05 => OK();
            public override void CompilerTest_6674_1E31 => OK();
            public override void CompilerTest_AD48_8B6A => OK();
            public override void CompilerTest_25E2_35E6 => OK();
            public override void CompilerTest_DA7B_B67A => OK();
            public override void CompilerTest_34B8_D672 => OK();
            public override void CompilerTest_5598_03A6 => OK();
            public override void CompilerTest_BB7C_2A2A => OK();
            public override void CompilerTest_2CF2_18B2 => OK();
            public override void CompilerTest_880F_A24B => OK();
            public override void CompilerTest_19B3_485B => OK();
            public override void CompilerTest_0662_485B => OK();
            public override void CompilerTest_F63E_8707 => OK();
            public override void CompilerTest_1C02_6E0D => OK();
            public override void CompilerTest_744C_C5E7 => OK();
            public override void CompilerTest_2156_D7F7 => OK();
            public override void CompilerTest_FCA9_3B3F => OK();
            public override void CompilerTest_6832_C62D => OK();
            public override void CompilerTest_4E9F_42FD => OK();
            public override void CompilerTest_30E5_8D77 => OK();
            public override void CompilerTest_AD7C_9EAF => OK();
            public override void CompilerTest_3E56_D0C6 => OK();
        }
    }
}
*/
}
