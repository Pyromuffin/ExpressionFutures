// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    [TestClass]
    public partial class CompilerTests
    {
        // Elapsed = 00:00:00.7715785
        [TestMethod]
        public void CompilerTest_9D30_AA02()
        {
            // <PERF>1699.2444ms</PERF>

            // (Expression<Func<int>>)(() => 42)
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => 42)");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Constant Type=""System.Int32"" Value=""42"" />
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_9D30_AA02();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9D30_AA02() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.4716610
        [TestMethod]
        public void CompilerTest_3ECF_6910()
        {
            // <PERF>193.673ms</PERF>

            // (Expression<Func<string, int>>)(s => s.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int>>)(s => s.Length)");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
    </MemberAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3ECF_6910();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3ECF_6910() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.6654027
        [TestMethod]
        public void CompilerTest_F51F_71B6()
        {
            // <PERF>22.8095ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""1, 1"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""42"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F51F_71B6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F51F_71B6() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.6882756
        [TestMethod]
        public void CompilerTest_E70E_4B35()
        {
            // <PERF>32.1754ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[1, 2] { { 42, 43 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[1, 2] { { 42, 43 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""1, 2"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""42"" />
        <Constant Type=""System.Int32"" Value=""43"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E70E_4B35();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E70E_4B35() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.7205215
        [TestMethod]
        public void CompilerTest_59A0_FFB9()
        {
            // <PERF>24.092ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[2, 1] { { 42 }, { 43 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[2, 1] { { 42 }, { 43 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""2, 1"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""42"" />
        <Constant Type=""System.Int32"" Value=""43"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_59A0_FFB9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_59A0_FFB9() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.7446840
        [TestMethod]
        public void CompilerTest_789A_453A()
        {
            // <PERF>36.5794ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[2, 2] { { 41, 42 }, { 43, 44 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[2, 2] { { 41, 42 }, { 43, 44 } })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32[,]]"">
  <Parameters />
  <Body>
    <CSharpNewMultidimensionalArrayInit Type=""System.Int32[,]"" Bounds=""2, 2"">
      <Expressions>
        <Constant Type=""System.Int32"" Value=""41"" />
        <Constant Type=""System.Int32"" Value=""42"" />
        <Constant Type=""System.Int32"" Value=""43"" />
        <Constant Type=""System.Int32"" Value=""44"" />
      </Expressions>
    </CSharpNewMultidimensionalArrayInit>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_789A_453A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_789A_453A() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.7813379
        [TestMethod]
        public void CompilerTest_E9F4_7C15()
        {
            // <PERF>24.0586ms</PERF>

            // (Expression<Func<int>>)(() => Math.Abs(value: 42))
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => Math.Abs(value: 42))");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <CSharpCall Type=""System.Int32"" Method=""Int32 Abs(Int32)"">
      <Arguments>
        <ParameterAssignment Parameter=""Int32 value"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_E9F4_7C15();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E9F4_7C15() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.8054715
        [TestMethod]
        public void CompilerTest_4EB1_83FD()
        {
            // <PERF>34.345ms</PERF>

            // (Expression<Func<string, string>>)(s => s.Substring(startIndex: 42))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(startIndex: 42))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4EB1_83FD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4EB1_83FD() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.8398670
        [TestMethod]
        public void CompilerTest_C437_AA4C()
        {
            // <PERF>28.5875ms</PERF>

            // (Expression<Func<string, string>>)(s => s.Substring(startIndex: 42, length: 43))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(startIndex: 42, length: 43))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32, Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Int32 length"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""43"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C437_AA4C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C437_AA4C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.8685290
        [TestMethod]
        public void CompilerTest_4C39_BCFC()
        {
            // <PERF>40.1914ms</PERF>

            // (Expression<Func<string, string>>)(s => s.Substring(length: 43, startIndex: 42))
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s.Substring(length: 43, startIndex: 42))");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpCall Type=""System.String"" Method=""System.String Substring(Int32, Int32)"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 length"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""43"" />
          </Expression>
        </ParameterAssignment>
        <ParameterAssignment Parameter=""Int32 startIndex"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4C39_BCFC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4C39_BCFC() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.9087962
        [TestMethod]
        public void CompilerTest_EDEC_D0C9()
        {
            // <PERF>24.2411ms</PERF>

            // (Expression<Func<List<int>, int>>)(xs => xs[index: 42])
            var actual = GetDebugView(@"(Expression<Func<List<int>, int>>)(xs => xs[index: 42])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Collections.Generic.List`1[System.Int32],System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpIndex Type=""System.Int32"" Indexer=""Int32 Item [Int32]"">
      <Object>
        <Parameter Type=""System.Collections.Generic.List`1[System.Int32]"" Id=""0"" Name=""xs"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 index"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_EDEC_D0C9();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EDEC_D0C9() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.9330868
        [TestMethod]
        public void CompilerTest_6271_EABC()
        {
            // <PERF>40.2088ms</PERF>

            // (Expression<Action<Action<int>>>)(a => a(obj: 42))
            var actual = GetDebugView(@"(Expression<Action<Action<int>>>)(a => a(obj: 42))");
            var expected = @"
<Lambda Type=""System.Action`1[System.Action`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Action`1[System.Int32]"" Id=""0"" Name=""a"" />
  </Parameters>
  <Body>
    <CSharpInvoke Type=""System.Void"">
      <Expression>
        <Parameter Type=""System.Action`1[System.Int32]"" Id=""0"" Name=""a"" />
      </Expression>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 obj"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpInvoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6271_EABC();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6271_EABC() => INCONCLUSIVE(); }

        // Elapsed = 00:00:02.9741742
        [TestMethod]
        public void CompilerTest_8E43_6B25()
        {
            // <PERF>26.1743ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => -x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => -x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicUnary Type=""System.Object"" OperationNodeType=""Negate"" Context=""Expressions"">
      <Operand>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Operand>
    </CSharpDynamicUnary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_8E43_6B25();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8E43_6B25() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.0004208
        [TestMethod]
        public void CompilerTest_191C_CEEB()
        {
            // <PERF>37.1184ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))");
            var expected = @"
<Lambda Type=""System.Func`3[System.Object,System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
    <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
  </Parameters>
  <Body>
    <CSharpDynamicBinary Type=""System.Object"" OperationNodeType=""Add"" Flags=""CheckedContext"" Context=""Expressions"">
      <Left>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""a"" />
          </Expression>
        </DynamicCSharpArgument>
      </Left>
      <Right>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""1"" Name=""b"" />
          </Expression>
        </DynamicCSharpArgument>
      </Right>
    </CSharpDynamicBinary>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_191C_CEEB();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_191C_CEEB() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.0376365
        [TestMethod]
        public void CompilerTest_6647_1258()
        {
            // <PERF>25.014ms</PERF>

            // (Expression<Func<dynamic, int>>)(x => (int)x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, int>>)(x => (int)x)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicConvert Type=""System.Int32"" Flags=""ConvertExplicit"" Context=""Expressions"">
      <Expression>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Expression>
    </CSharpDynamicConvert>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6647_1258();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6647_1258() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.0627103
        [TestMethod]
        public void CompilerTest_AB76_B2ED()
        {
            // <PERF>33.66ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
    </CSharpDynamicGetMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AB76_B2ED();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AB76_B2ED() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.0964377
        [TestMethod]
        public void CompilerTest_C598_D480()
        {
            // <PERF>24.6905ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo(1))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo(1))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeMember Type=""System.Object"" Name=""Foo"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeMember>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C598_D480();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C598_D480() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.1211822
        [TestMethod]
        public void CompilerTest_55B7_3EFA()
        {
            // <PERF>24.3156ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <CSharpDynamicGetMember Type=""System.Object"" Name=""Foo"" Flags=""ResultIndexed"" Context=""Expressions"">
          <Object>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Object>
        </CSharpDynamicGetMember>
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_55B7_3EFA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_55B7_3EFA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.1455884
        [TestMethod]
        public void CompilerTest_7760_936B()
        {
            // <PERF>24.7177ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x[1])");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicGetIndex Type=""System.Object"" Context=""Expressions"">
      <Object>
        <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
      </Object>
      <Arguments>
        <DynamicCSharpArgument Flags=""UseCompileTimeType, Constant"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""1"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicGetIndex>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7760_936B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7760_936B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.1703596
        [TestMethod]
        public void CompilerTest_22AA_5962()
        {
            // <PERF>25.9708ms</PERF>

            // (Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.TimeSpan]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpDynamicInvokeConstructor Type=""System.TimeSpan"" Context=""Expressions"">
      <Arguments>
        <DynamicCSharpArgument>
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""x"" />
          </Expression>
        </DynamicCSharpArgument>
      </Arguments>
    </CSharpDynamicInvokeConstructor>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_22AA_5962();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_22AA_5962() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.1963879
        [TestMethod]
        public void CompilerTest_0FFA_7AF2()
        {
            // <PERF>23.4981ms</PERF>

            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t)
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Int32]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Int32"" GetAwaiterMethod=""System.Runtime.CompilerServices.TaskAwaiter`1[System.Int32] GetAwaiter()"">
              <Operand>
                <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0FFA_7AF2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0FFA_7AF2() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.2199489
        [TestMethod]
        public void CompilerTest_83AE_26E4()
        {
            // <PERF>50.5452ms</PERF>

            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Int32]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Threading.Tasks.Task`1[System.Int32],System.Threading.Tasks.Task`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Int32"" GetAwaiterMethod=""ConfiguredTaskAwaiter GetAwaiter()"">
              <Operand>
                <Call Type=""System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1[System.Int32]"" Method=""System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1[System.Int32] ConfigureAwait(Boolean)"">
                  <Object>
                    <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
                  </Object>
                  <Arguments>
                    <Constant Type=""System.Boolean"" Value=""false"" />
                  </Arguments>
                </Call>
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Threading.Tasks.Task`1[System.Int32]"" Id=""0"" Name=""t"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_83AE_26E4();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_83AE_26E4() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.2705548
        [TestMethod]
        public void CompilerTest_4DC5_243C()
        {
            // <PERF>23.3937ms</PERF>

            // (Expression<Func<dynamic, Task<dynamic>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<dynamic>>>)(async d => await d)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Object]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
          <Parameters>
            <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Object"" IsDynamic=""true"">
              <Operand>
                <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4DC5_243C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4DC5_243C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.2940020
        [TestMethod]
        public void CompilerTest_5DFD_243C()
        {
            // <PERF>23.8912ms</PERF>

            // (Expression<Func<dynamic, Task<object>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<object>>>)(async d => await d)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Object]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Object]]"">
          <Parameters>
            <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
          </Parameters>
          <Body>
            <CSharpAwait Type=""System.Object"" IsDynamic=""true"">
              <Operand>
                <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
              </Operand>
            </CSharpAwait>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5DFD_243C();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5DFD_243C() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.3179477
        [TestMethod]
        public void CompilerTest_1A0E_F439()
        {
            // <PERF>21.3494ms</PERF>

            // (Expression<Func<dynamic, Task<int>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<int>>>)(async d => await d)");
            var expected = @"
<Lambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <Invoke Type=""System.Threading.Tasks.Task`1[System.Int32]"">
      <Expression>
        <CSharpAsyncLambda Type=""System.Func`2[System.Object,System.Threading.Tasks.Task`1[System.Int32]]"">
          <Parameters>
            <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
          </Parameters>
          <Body>
            <CSharpDynamicConvert Type=""System.Int32"" Context=""Expressions"">
              <Expression>
                <CSharpAwait Type=""System.Object"" IsDynamic=""true"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
                  </Operand>
                </CSharpAwait>
              </Expression>
            </CSharpDynamicConvert>
          </Body>
        </CSharpAsyncLambda>
      </Expression>
      <Arguments>
        <Parameter Type=""System.Object"" Id=""0"" Name=""d"" />
      </Arguments>
    </Invoke>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1A0E_F439();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1A0E_F439() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.3393560
        [TestMethod]
        public void CompilerTest_B340_DAC2()
        {
            // <PERF>23.0014ms</PERF>

            // (Expression<Func<string, int?>>)(s => s?.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int?>>)(s => s?.Length)");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalMemberAccess Type=""System.Nullable`1[System.Int32]"" Member=""Int32 Length"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
    </CSharpConditionalMemberAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_B340_DAC2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B340_DAC2() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.3624181
        [TestMethod]
        public void CompilerTest_A997_3059()
        {
            // <PERF>29.2292ms</PERF>

            // (Expression<Func<string, string>>)(s => s?.ToUpper())
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s?.ToUpper())");
            var expected = @"
<Lambda Type=""System.Func`2[System.String,System.String]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <CSharpConditionalCall Type=""System.String"" Method=""System.String ToUpper()"">
      <Object>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Object>
      <Arguments />
    </CSharpConditionalCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A997_3059();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A997_3059() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.3917232
        [TestMethod]
        public void CompilerTest_CF40_3016()
        {
            // <PERF>48.5982ms</PERF>

            // (Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))
            var actual = GetDebugView(@"(Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))");
            var expected = @"
<Lambda Type=""System.Func`2[System.Func`2[System.Int32,System.Int32],System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Func`2[System.Int32,System.Int32]"" Id=""0"" Name=""f"" />
  </Parameters>
  <Body>
    <CSharpConditionalCall Type=""System.Nullable`1[System.Int32]"" Method=""Int32 Invoke(Int32)"">
      <Object>
        <Parameter Type=""System.Func`2[System.Int32,System.Int32]"" Id=""0"" Name=""f"" />
      </Object>
      <Arguments>
        <ParameterAssignment Parameter=""Int32 arg"">
          <Expression>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Expression>
        </ParameterAssignment>
      </Arguments>
    </CSharpConditionalCall>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_CF40_3016();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CF40_3016() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.4403968
        [TestMethod]
        public void CompilerTest_A8D0_49C3()
        {
            // <PERF>26.4737ms</PERF>

            // (Expression<Action>)(() => { })
            var actual = GetDebugView(@"(Expression<Action>)(() => { })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements />
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_A8D0_49C3();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A8D0_49C3() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.4669209
        [TestMethod]
        public void CompilerTest_197A_9EF8()
        {
            // <PERF>21.7515ms</PERF>

            // (Expression<Action>)(() => { int x; x = 5; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int x; x = 5; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <Assign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""5"" />
          </Right>
        </Assign>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_197A_9EF8();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_197A_9EF8() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.4887273
        [TestMethod]
        public void CompilerTest_27AA_544E()
        {
            // <PERF>68.4129ms</PERF>

            // (Expression<Action>)(() => { int x; x = 5; { int y = x + 1; Console.WriteLine(y); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { int x; x = 5; { int y = x + 1; Console.WriteLine(y); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <Assign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""5"" />
          </Right>
        </Assign>
        <Block Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
          </Variables>
          <Expressions>
            <Assign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
              </Left>
              <Right>
                <Add Type=""System.Int32"">
                  <Left>
                    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
                  </Left>
                  <Right>
                    <Constant Type=""System.Int32"" Value=""1"" />
                  </Right>
                </Add>
              </Right>
            </Assign>
            <Call Type=""System.Void"" Method=""Void WriteLine(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""y"" />
              </Arguments>
            </Call>
          </Expressions>
        </Block>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_27AA_544E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_27AA_544E() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.5573584
        [TestMethod]
        public void CompilerTest_0BD6_C135()
        {
            // <PERF>24.7588ms</PERF>

            // (Expression<Action>)(() => { ; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Default Type=""System.Void"" />
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0BD6_C135();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0BD6_C135() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.5821689
        [TestMethod]
        public void CompilerTest_7F95_E445()
        {
            // <PERF>52.9688ms</PERF>

            // (Expression<Action>)(() => { ;; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ;; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Default Type=""System.Void"" />
        <Default Type=""System.Void"" />
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7F95_E445();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7F95_E445() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.6352042
        [TestMethod]
        public void CompilerTest_6102_7F8E()
        {
            // <PERF>21.9407ms</PERF>

            // (Expression<Action>)(() => { return; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { return; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Goto Type=""System.Void"" Kind=""Return"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </Target>
        </Goto>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6102_7F8E();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6102_7F8E() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.6571984
        [TestMethod]
        public void CompilerTest_AEF8_9F07()
        {
            // <PERF>24.9939ms</PERF>

            // (Expression<Func<int>>)(() => { int x = 42; return x; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { int x = 42; return x; })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Int32"">
      <Variables>
        <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
      </Variables>
      <Statements>
        <Assign Type=""System.Int32"">
          <Left>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Left>
          <Right>
            <Constant Type=""System.Int32"" Value=""42"" />
          </Right>
        </Assign>
        <Goto Type=""System.Void"" Kind=""Return"">
          <Target>
            <LabelTarget Type=""System.Int32"" Id=""1"" />
          </Target>
          <Value>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </Value>
        </Goto>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Int32"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AEF8_9F07();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AEF8_9F07() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.6822499
        [TestMethod]
        public void CompilerTest_7381_AA02()
        {
            // <PERF>21.2637ms</PERF>

            // (Expression<Func<int>>)(() => { return 42; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { return 42; })");
            var expected = @"
<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Constant Type=""System.Int32"" Value=""42"" />
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_7381_AA02();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7381_AA02() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.7035957
        [TestMethod]
        public void CompilerTest_BBBC_A048()
        {
            // <PERF>30.4449ms</PERF>

            // (Expression<Action>)(() => { goto A; A: Console.Write('A'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { goto A; A: Console.Write('A'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpGoto Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </CSharpGoto>
        <Label Type=""System.Void"" />
        <Call Type=""System.Void"" Method=""Void Write(Char)"">
          <Arguments>
            <Constant Type=""System.Char"" Value=""A"" />
          </Arguments>
        </Call>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BBBC_A048();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BBBC_A048() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.7340977
        [TestMethod]
        public void CompilerTest_6FC7_B707()
        {
            // <PERF>28.451ms</PERF>

            // (Expression<Action>)(() => { A: Console.Write('A'); goto A; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { A: Console.Write('A'); goto A; })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <Label Type=""System.Void"" />
        <Call Type=""System.Void"" Method=""Void Write(Char)"">
          <Arguments>
            <Constant Type=""System.Char"" Value=""A"" />
          </Arguments>
        </Call>
        <CSharpGoto Type=""System.Void"">
          <Target>
            <LabelTarget Type=""System.Void"" Id=""0"" Name=""A"" />
          </Target>
        </CSharpGoto>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6FC7_B707();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6FC7_B707() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.7626451
        [TestMethod]
        public void CompilerTest_C90B_9C05()
        {
            // <PERF>49.2144ms</PERF>

            // (Expression<Action>)(() => { while (true) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpWhile Type=""System.Void"">
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpWhile>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_C90B_9C05();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C90B_9C05() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.8119149
        [TestMethod]
        public void CompilerTest_6674_1E31()
        {
            // <PERF>26.6204ms</PERF>

            // (Expression<Action>)(() => { do { Console.Write('.'); } while (true); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { do { Console.Write('.'); } while (true); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpDo Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Test>
            <Constant Type=""System.Boolean"" Value=""true"" />
          </Test>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpDo>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6674_1E31();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6674_1E31() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.8386121
        [TestMethod]
        public void CompilerTest_AD48_8B6A()
        {
            // <PERF>31.2655ms</PERF>

            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpFor Type=""System.Void"">
          <Variables>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
          </Variables>
          <Initializers>
            <Assign Type=""System.Int32"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""0"" />
              </Right>
            </Assign>
          </Initializers>
          <Test>
            <LessThan Type=""System.Boolean"">
              <Left>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Left>
              <Right>
                <Constant Type=""System.Int32"" Value=""10"" />
              </Right>
            </LessThan>
          </Test>
          <Iterators>
            <PostIncrementAssign Type=""System.Int32"">
              <Operand>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Operand>
            </PostIncrementAssign>
          </Iterators>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""0"" Name=""i"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </ContinueLabel>
        </CSharpFor>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""3"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD48_8B6A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD48_8B6A() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.8699445
        [TestMethod]
        public void CompilerTest_25E2_35E6()
        {
            // <PERF>34.0135ms</PERF>

            // (Expression<Action>)(() => { for (;;) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (;;) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <Block Type=""System.Void"">
      <Expressions>
        <CSharpFor Type=""System.Void"">
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Char)"">
              <Arguments>
                <Constant Type=""System.Char"" Value=""."" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""0"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </ContinueLabel>
        </CSharpFor>
      </Expressions>
    </Block>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_25E2_35E6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_25E2_35E6() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.9040343
        [TestMethod]
        public void CompilerTest_DA7B_B67A()
        {
            // <PERF>30.1552ms</PERF>

            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32[]]"">
  <Parameters>
    <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Collection>
            <Parameter Type=""System.Int32[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""2"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""4"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_DA7B_B67A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DA7B_B67A() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.9342765
        [TestMethod]
        public void CompilerTest_34B8_D672()
        {
            // <PERF>56.3723ms</PERF>

            // (Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object[]]"">
  <Parameters>
    <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpForEach Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
          </Variable>
          <Conversion>
            <Lambda Type=""System.Func`2[System.Object,System.Int32]"">
              <Parameters>
                <Parameter Type=""System.Object"" Id=""2"" />
              </Parameters>
              <Body>
                <Convert Type=""System.Int32"">
                  <Operand>
                    <Parameter Type=""System.Object"" Id=""2"" />
                  </Operand>
                </Convert>
              </Body>
            </Lambda>
          </Conversion>
          <Collection>
            <Parameter Type=""System.Object[]"" Id=""0"" Name=""xs"" />
          </Collection>
          <Body>
            <Call Type=""System.Void"" Method=""Void Write(Int32)"">
              <Arguments>
                <Parameter Type=""System.Int32"" Id=""1"" Name=""x"" />
              </Arguments>
            </Call>
          </Body>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""3"" />
          </BreakLabel>
          <ContinueLabel>
            <LabelTarget Type=""System.Void"" Id=""4"" />
          </ContinueLabel>
        </CSharpForEach>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""5"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_34B8_D672();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_34B8_D672() => INCONCLUSIVE(); }

        // Elapsed = 00:00:03.9907274
        [TestMethod]
        public void CompilerTest_5598_03A6()
        {
            // <PERF>29.8ms</PERF>

            // (Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_5598_03A6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5598_03A6() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.0205983
        [TestMethod]
        public void CompilerTest_BB7C_2A2A()
        {
            // <PERF>29.6206ms</PERF>

            // (Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })");
            var expected = @"
<Lambda Type=""System.Action`1[System.IDisposable]"">
  <Parameters>
    <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpUsing Type=""System.Void"">
          <Variable>
            <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
          </Variable>
          <Resource>
            <Parameter Type=""System.IDisposable"" Id=""0"" Name=""d"" />
          </Resource>
          <Body>
            <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
              <Arguments>
                <Parameter Type=""System.IDisposable"" Id=""1"" Name=""e"" />
              </Arguments>
            </Call>
          </Body>
        </CSharpUsing>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_BB7C_2A2A();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BB7C_2A2A() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.0502747
        [TestMethod]
        public void CompilerTest_2CF2_18B2()
        {
            // <PERF>27.094ms</PERF>

            // (Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Object]"">
  <Parameters>
    <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpLock Type=""System.Void"">
          <Expression>
            <Parameter Type=""System.Object"" Id=""0"" Name=""o"" />
          </Expression>
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""."" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
        </CSharpLock>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2CF2_18B2();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2CF2_18B2() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.0774543
        [TestMethod]
        public void CompilerTest_880F_A24B()
        {
            // <PERF>31.4681ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Finally>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Finally>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_880F_A24B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_880F_A24B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.1090108
        [TestMethod]
        public void CompilerTest_19B3_485B()
        {
            // <PERF>77.5262ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""C"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_19B3_485B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_19B3_485B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.1869672
        [TestMethod]
        public void CompilerTest_0662_485B()
        {
            // <PERF>28.9289ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.Exception"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""C"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_0662_485B();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0662_485B() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.2159617
        [TestMethod]
        public void CompilerTest_F63E_8707()
        {
            // <PERF>45.5892ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_F63E_8707();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F63E_8707() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.2616383
        [TestMethod]
        public void CompilerTest_1C02_6E0D()
        {
            // <PERF>39.978ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock Test=""System.InvalidOperationException"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""I"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
            <CatchBlock Test=""System.OverflowException"">
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void Write(Char)"">
                      <Arguments>
                        <Constant Type=""System.Char"" Value=""O"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""0"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_1C02_6E0D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1C02_6E0D() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.3016775
        [TestMethod]
        public void CompilerTest_744C_C5E7()
        {
            // <PERF>43.4628ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })");
            var expected = @"
<Lambda Type=""System.Action"">
  <Parameters />
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <Try Type=""System.Void"">
          <Body>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""T"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Body>
          <Handlers>
            <CatchBlock>
              <Variable>
                <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
              </Variable>
              <Body>
                <Block Type=""System.Void"">
                  <Expressions>
                    <Call Type=""System.Void"" Method=""Void WriteLine(System.Object)"">
                      <Arguments>
                        <Parameter Type=""System.Exception"" Id=""0"" Name=""e"" />
                      </Arguments>
                    </Call>
                  </Expressions>
                </Block>
              </Body>
            </CatchBlock>
          </Handlers>
          <Finally>
            <Block Type=""System.Void"">
              <Expressions>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""F"" />
                  </Arguments>
                </Call>
              </Expressions>
            </Block>
          </Finally>
        </Try>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""1"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_744C_C5E7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_744C_C5E7() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.3452331
        [TestMethod]
        public void CompilerTest_2156_D7F7()
        {
            // <PERF>23.8765ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) {} })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) {} })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases />
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_2156_D7F7();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2156_D7F7() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.3691609
        [TestMethod]
        public void CompilerTest_FCA9_3B3F()
        {
            // <PERF>29.8335ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""0"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_FCA9_3B3F();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FCA9_3B3F() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.3990586
        [TestMethod]
        public void CompilerTest_6832_C62D()
        {
            // <PERF>29.2538ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0, 1"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""A"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_6832_C62D();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6832_C62D() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.4283892
        [TestMethod]
        public void CompilerTest_4E9F_42FD()
        {
            // <PERF>45.6779ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Int32]"">
  <Parameters>
    <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Int32"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""A"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""D"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_4E9F_42FD();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4E9F_42FD() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.4741421
        [TestMethod]
        public void CompilerTest_30E5_8D77()
        {
            // <PERF>50.2533ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0, null"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_30E5_8D77();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_30E5_8D77() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.5244552
        [TestMethod]
        public void CompilerTest_AD7C_9EAF()
        {
            // <PERF>31.9831ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""0"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <CSharpGoto Type=""System.Void"" Value=""0"" />
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_AD7C_9EAF();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD7C_9EAF() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.5565043
        [TestMethod]
        public void CompilerTest_3E56_D0C6()
        {
            // <PERF>34.4861ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })");
            var expected = @"
<Lambda Type=""System.Action`1[System.Nullable`1[System.Int32]]"">
  <Parameters>
    <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
  </Parameters>
  <Body>
    <CSharpBlock Type=""System.Void"">
      <Statements>
        <CSharpSwitch Type=""System.Void"">
          <SwitchValue>
            <Parameter Type=""System.Nullable`1[System.Int32]"" Id=""0"" Name=""x"" />
          </SwitchValue>
          <Cases>
            <CSharpSwitchCase TestValues=""null"">
              <Statements>
                <CSharpGoto Type=""System.Void"" />
              </Statements>
            </CSharpSwitchCase>
            <CSharpSwitchCase TestValues=""default"">
              <Statements>
                <Call Type=""System.Void"" Method=""Void Write(Char)"">
                  <Arguments>
                    <Constant Type=""System.Char"" Value=""N"" />
                  </Arguments>
                </Call>
                <Goto Type=""System.Void"" Kind=""Break"">
                  <Target>
                    <LabelTarget Type=""System.Void"" Id=""1"" />
                  </Target>
                </Goto>
              </Statements>
            </CSharpSwitchCase>
          </Cases>
          <BreakLabel>
            <LabelTarget Type=""System.Void"" Id=""1"" />
          </BreakLabel>
        </CSharpSwitch>
      </Statements>
      <ReturnLabel>
        <LabelTarget Type=""System.Void"" Id=""2"" />
      </ReturnLabel>
    </CSharpBlock>
  </Body>
</Lambda>";
            Assert.AreEqual(expected.TrimStart('\r', '\n'), actual);
            Verify.CompilerTest_3E56_D0C6();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3E56_D0C6() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { Assert.Inconclusive(); }
        }

        partial class Reviewed : Review
        {
            private void OK() {}
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests
    {
        partial class Reviewed
        {
            public override void CompilerTest_9D30_AA02 => OK();
            public override void CompilerTest_3ECF_6910 => OK();
            public override void CompilerTest_F51F_71B6 => OK();
            public override void CompilerTest_E70E_4B35 => OK();
            public override void CompilerTest_59A0_FFB9 => OK();
            public override void CompilerTest_789A_453A => OK();
            public override void CompilerTest_E9F4_7C15 => OK();
            public override void CompilerTest_4EB1_83FD => OK();
            public override void CompilerTest_C437_AA4C => OK();
            public override void CompilerTest_4C39_BCFC => OK();
            public override void CompilerTest_EDEC_D0C9 => OK();
            public override void CompilerTest_6271_EABC => OK();
            public override void CompilerTest_8E43_6B25 => OK();
            public override void CompilerTest_191C_CEEB => OK();
            public override void CompilerTest_6647_1258 => OK();
            public override void CompilerTest_AB76_B2ED => OK();
            public override void CompilerTest_C598_D480 => OK();
            public override void CompilerTest_55B7_3EFA => OK();
            public override void CompilerTest_7760_936B => OK();
            public override void CompilerTest_22AA_5962 => OK();
            public override void CompilerTest_0FFA_7AF2 => OK();
            public override void CompilerTest_83AE_26E4 => OK();
            public override void CompilerTest_4DC5_243C => OK();
            public override void CompilerTest_5DFD_243C => OK();
            public override void CompilerTest_1A0E_F439 => OK();
            public override void CompilerTest_B340_DAC2 => OK();
            public override void CompilerTest_A997_3059 => OK();
            public override void CompilerTest_CF40_3016 => OK();
            public override void CompilerTest_A8D0_49C3 => OK();
            public override void CompilerTest_197A_9EF8 => OK();
            public override void CompilerTest_27AA_544E => OK();
            public override void CompilerTest_0BD6_C135 => OK();
            public override void CompilerTest_7F95_E445 => OK();
            public override void CompilerTest_6102_7F8E => OK();
            public override void CompilerTest_AEF8_9F07 => OK();
            public override void CompilerTest_7381_AA02 => OK();
            public override void CompilerTest_BBBC_A048 => OK();
            public override void CompilerTest_6FC7_B707 => OK();
            public override void CompilerTest_C90B_9C05 => OK();
            public override void CompilerTest_6674_1E31 => OK();
            public override void CompilerTest_AD48_8B6A => OK();
            public override void CompilerTest_25E2_35E6 => OK();
            public override void CompilerTest_DA7B_B67A => OK();
            public override void CompilerTest_34B8_D672 => OK();
            public override void CompilerTest_5598_03A6 => OK();
            public override void CompilerTest_BB7C_2A2A => OK();
            public override void CompilerTest_2CF2_18B2 => OK();
            public override void CompilerTest_880F_A24B => OK();
            public override void CompilerTest_19B3_485B => OK();
            public override void CompilerTest_0662_485B => OK();
            public override void CompilerTest_F63E_8707 => OK();
            public override void CompilerTest_1C02_6E0D => OK();
            public override void CompilerTest_744C_C5E7 => OK();
            public override void CompilerTest_2156_D7F7 => OK();
            public override void CompilerTest_FCA9_3B3F => OK();
            public override void CompilerTest_6832_C62D => OK();
            public override void CompilerTest_4E9F_42FD => OK();
            public override void CompilerTest_30E5_8D77 => OK();
            public override void CompilerTest_AD7C_9EAF => OK();
            public override void CompilerTest_3E56_D0C6 => OK();
        }
    }
}
*/
}
