// Prototyping extended expression trees for C#.
//
// bartde - November 2015

// NB: Running these tests can take a *VERY LONG* time because it invokes the C# compiler for every test
//     case in order to obtain an expression tree object. Be patient when running these tests.

// NB: These tests are generated from a list of expressions in the .tt file by invoking the C# compiler at
//     text template processing time by the T4 engine. See TestUtilities for the helper functions that call
//     into the compiler, load the generated assembly, extract the Expression objects through reflection on
//     the generated type, and call DebugView() on those. The resulting DebugView string is emitted in this
//     file as `expected` variables. The original expression is escaped and gets passed ot the GetDebugView
//     helper method to obtain `actual`, which causes the C# compiler to run at test execution time, using
//     the same helper library, thus obtaining the DebugView string again. This serves a number of goals:
//
//       1. At test generation time, a custom Roslyn build can be invoked to test the implicit conversion
//          of a lambda expression to an expression tree, which involves the changes made to support the
//          C# expression library in this solution. Any fatal compiler errors will come out at that time.
//
//       2. Reflection on the properties in the emitted class causes a deferred execution of the factory
//          method calls generated by the Roslyn compiler for the implicit conversion of the lambda to an
//          expression tree. Any exceptions thrown by the factory methods will show up as well during test
//          generation time, allowing issues to be uncovered.
//
//       3. The string literals in the `expected` variables are inspectable by a human to assert that the
//          compiler has indeed generated an expression representation that's homo-iconic to the original
//          expression that was provided in the test.
//
//       4. Any changes to the compiler or the runtime library could cause regressions. Because template
//          processing of the T4 only takes place upon editing the .tt file, the generated test code won't
//          change. As such, any regression can cause test failures which allows to detect any changes to
//          compiler or runtime library behavior.

using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Tests.Microsoft.CodeAnalysis.CSharp.TestUtilities;

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    [TestClass]
    public partial class CompilerTests
    {
        // Elapsed = 00:00:00.3464049
        [TestMethod]
        public void CompilerTest_9D30_AA02()
        {
            // <PERF>4548.0105ms</PERF>

            // (Expression<Func<int>>)(() => 42)
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => 42)");
            var expected = @"<Lambda Type=""System.Func`1[System.Int32]"">
  <Parameters />
  <Body>
    <Constant Type=""System.Int32"" Value=""42"" />
  </Body>
</Lambda>";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_9D30_AA02();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_9D30_AA02() => INCONCLUSIVE(); }

        // Elapsed = 00:00:04.8954208
        [TestMethod]
        public void CompilerTest_3ECF_6910()
        {
            // <PERF>193.7913ms</PERF>

            // (Expression<Func<string, int>>)(s => s.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int>>)(s => s.Length)");
            var expected = @"<Lambda Type=""System.Func`2[System.String,System.Int32]"">
  <Parameters>
    <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
  </Parameters>
  <Body>
    <MemberAccess Type=""System.Int32"" Member=""Int32 Length"">
      <Expression>
        <Parameter Type=""System.String"" Id=""0"" Name=""s"" />
      </Expression>
    </MemberAccess>
  </Body>
</Lambda>";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_3ECF_6910();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3ECF_6910() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.0892580
        [Ignore]
        // (10,77): error CS0838: An expression tree may not contain a multidimensional array initializer
        [TestMethod]
        public void CompilerTest_F51F_B7BA()
        {
            // <PERF>78.0404ms</PERF>

            // (Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })
            var actual = GetDebugView(@"(Expression<Func<int[,]>>)(() => new int[1, 1] { { 42 } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_F51F_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F51F_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.1673524
        [Ignore]
        // (10,74): error CS0853: An expression tree may not contain a named argument specification
        [TestMethod]
        public void CompilerTest_E9F4_B7BA()
        {
            // <PERF>68.0595ms</PERF>

            // (Expression<Func<int>>)(() => Math.Abs(value: 42))
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => Math.Abs(value: 42))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_E9F4_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_E9F4_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.2354819
        [Ignore]
        // (10,79): error CS0853: An expression tree may not contain a named argument specification
        [TestMethod]
        public void CompilerTest_00C1_B7BA()
        {
            // <PERF>32.4512ms</PERF>

            // (Expression<Func<TimeSpan>>)(() => new TimeSpan(ticks: 42L))
            var actual = GetDebugView(@"(Expression<Func<TimeSpan>>)(() => new TimeSpan(ticks: 42L))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_00C1_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_00C1_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.2679991
        [Ignore]
        // (10,85): error CS0853: An expression tree may not contain a named argument specification
        [TestMethod]
        public void CompilerTest_EDEC_B7BA()
        {
            // <PERF>62.9175ms</PERF>

            // (Expression<Func<List<int>, int>>)(xs => xs[index: 42])
            var actual = GetDebugView(@"(Expression<Func<List<int>, int>>)(xs => xs[index: 42])");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_EDEC_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_EDEC_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.3309964
        [Ignore]
        // (10,83): error CS0853: An expression tree may not contain a named argument specification
        [TestMethod]
        public void CompilerTest_6271_B7BA()
        {
            // <PERF>22.64ms</PERF>

            // (Expression<Action<Action<int>>>)(a => a(obj: 42))
            var actual = GetDebugView(@"(Expression<Action<Action<int>>>)(a => a(obj: 42))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_6271_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6271_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.3537131
        [Ignore]
        // (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_8E43_B7BA()
        {
            // <PERF>22.5686ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => -x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => -x)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_8E43_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_8E43_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.3764410
        [Ignore]
        // (10,108): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_191C_B7BA()
        {
            // <PERF>45.586ms</PERF>

            // (Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic, dynamic>>)((a, b) => checked(a + b))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_191C_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_191C_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.4220841
        [Ignore]
        // (10,82): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_6647_B7BA()
        {
            // <PERF>26.7816ms</PERF>

            // (Expression<Func<dynamic, int>>)(x => (int)x)
            var actual = GetDebugView(@"(Expression<Func<dynamic, int>>)(x => (int)x)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_6647_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6647_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.4489264
        [Ignore]
        // (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_AB76_B7BA()
        {
            // <PERF>13.3736ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo)
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_AB76_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AB76_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.4623531
        [Ignore]
        // (10,86): error CS1963: An expression tree may not contain a dynamic operation
        // (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_C598_B7BA()
        {
            // <PERF>18.065ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo(1))
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo(1))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_C598_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C598_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.4804788
        [Ignore]
        // (10,86): error CS1963: An expression tree may not contain a dynamic operation
        // (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_55B7_B7BA()
        {
            // <PERF>25.8735ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x.Foo[1])");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_55B7_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_55B7_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.5064036
        [Ignore]
        // (10,86): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_7760_B7BA()
        {
            // <PERF>12.1884ms</PERF>

            // (Expression<Func<dynamic, dynamic>>)(x => x[1])
            var actual = GetDebugView(@"(Expression<Func<dynamic, dynamic>>)(x => x[1])");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_7760_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7760_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.5186625
        [Ignore]
        // (10,82): error CS1963: An expression tree may not contain a dynamic operation
        // (10,82): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_4B4B_B7BA()
        {
            // <PERF>31.9139ms</PERF>

            // (Expression<Func<dynamic, int>>)(x => int.Parse(x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, int>>)(x => int.Parse(x))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_4B4B_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4B4B_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.5506446
        [Ignore]
        // (10,87): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_22AA_B7BA()
        {
            // <PERF>18.9071ms</PERF>

            // (Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))
            var actual = GetDebugView(@"(Expression<Func<dynamic, TimeSpan>>)(x => new TimeSpan(x))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_22AA_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_22AA_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.5696276
        [Ignore]
        // (10,85): error CS1989: Async lambda expressions cannot be converted to expression trees
        [TestMethod]
        public void CompilerTest_0FFA_B7BA()
        {
            // <PERF>62.9402ms</PERF>

            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t)
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_0FFA_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0FFA_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.6326534
        [Ignore]
        // (10,85): error CS1989: Async lambda expressions cannot be converted to expression trees
        [TestMethod]
        public void CompilerTest_83AE_B7BA()
        {
            // <PERF>35.6115ms</PERF>

            // (Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))
            var actual = GetDebugView(@"(Expression<Func<Task<int>, Task<int>>>)(async t => await t.ConfigureAwait(false))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_83AE_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_83AE_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.6683484
        [Ignore]
        // (10,83): error CS1989: Async lambda expressions cannot be converted to expression trees
        // (10,94): error CS1963: An expression tree may not contain a dynamic operation
        [TestMethod]
        public void CompilerTest_1A0E_B7BA()
        {
            // <PERF>18.2493ms</PERF>

            // (Expression<Func<dynamic, Task<int>>>)(async d => await d)
            var actual = GetDebugView(@"(Expression<Func<dynamic, Task<int>>>)(async d => await d)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_1A0E_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1A0E_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.6866780
        [Ignore]
        // (10,82): error CS8072: An expression tree lambda may not contain a null propagating operator.
        [TestMethod]
        public void CompilerTest_B340_B7BA()
        {
            // <PERF>53.0839ms</PERF>

            // (Expression<Func<string, int?>>)(s => s?.Length)
            var actual = GetDebugView(@"(Expression<Func<string, int?>>)(s => s?.Length)");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_B340_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_B340_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.7398369
        [Ignore]
        // (10,84): error CS8072: An expression tree lambda may not contain a null propagating operator.
        [TestMethod]
        public void CompilerTest_A997_B7BA()
        {
            // <PERF>17.0507ms</PERF>

            // (Expression<Func<string, string>>)(s => s?.ToUpper())
            var actual = GetDebugView(@"(Expression<Func<string, string>>)(s => s?.ToUpper())");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_A997_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A997_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.7569773
        [Ignore]
        // (10,83): error CS8072: An expression tree lambda may not contain a null propagating operator.
        [TestMethod]
        public void CompilerTest_CB0C_B7BA()
        {
            // <PERF>15.3031ms</PERF>

            // (Expression<Func<string, char?>>)(s => s?[42])
            var actual = GetDebugView(@"(Expression<Func<string, char?>>)(s => s?[42])");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_CB0C_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CB0C_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.7723429
        [Ignore]
        // (10,90): error CS8072: An expression tree lambda may not contain a null propagating operator.
        [TestMethod]
        public void CompilerTest_CF40_B7BA()
        {
            // <PERF>13.3607ms</PERF>

            // (Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))
            var actual = GetDebugView(@"(Expression<Func<Func<int, int>, int?>>)(f => f?.Invoke(42))");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_CF40_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_CF40_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.7857634
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_A8D0_B7BA()
        {
            // <PERF>49.1721ms</PERF>

            // (Expression<Action>)(() => { })
            var actual = GetDebugView(@"(Expression<Action>)(() => { })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_A8D0_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_A8D0_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.8350198
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_0BD6_B7BA()
        {
            // <PERF>21.075ms</PERF>

            // (Expression<Action>)(() => { ; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { ; })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_0BD6_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0BD6_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.8561474
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_6102_B7BA()
        {
            // <PERF>20.1044ms</PERF>

            // (Expression<Action>)(() => { return; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { return; })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_6102_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6102_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.8763959
        [Ignore]
        // (10,68): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_7381_B7BA()
        {
            // <PERF>27.7036ms</PERF>

            // (Expression<Func<int>>)(() => { return 42; })
            var actual = GetDebugView(@"(Expression<Func<int>>)(() => { return 42; })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_7381_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_7381_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.9042034
        [Ignore]
        // (10,84): error CS1525: Invalid expression term '}'
        // (10,84): error CS1002: ; expected
        [TestMethod]
        public void CompilerTest_1245_B7BA()
        {
            // <PERF>91.9999ms</PERF>

            // (Expression<Action>)(() => { goto A; A: })
            var actual = GetDebugView(@"(Expression<Action>)(() => { goto A; A: })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_1245_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1245_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:05.9962591
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_3464_B7BA()
        {
            // <PERF>15.7525ms</PERF>

            // (Expression<Action>)(() => { A: goto A; })
            var actual = GetDebugView(@"(Expression<Action>)(() => { A: goto A; })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_3464_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3464_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.0121000
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_C90B_B7BA()
        {
            // <PERF>93.3676ms</PERF>

            // (Expression<Action>)(() => { while (true) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { while (true) Console.Write('.'); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_C90B_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_C90B_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.1055305
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_6674_B7BA()
        {
            // <PERF>16.8624ms</PERF>

            // (Expression<Action>)(() => { do { Console.Write('.'); } while (true); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { do { Console.Write('.'); } while (true); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_6674_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6674_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.1224469
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        // (10,97): error CS0832: An expression tree may not contain an assignment operator
        [TestMethod]
        public void CompilerTest_AD48_B7BA()
        {
            // <PERF>127.0811ms</PERF>

            // (Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (var i = 0; i < 10; i++) Console.Write(i); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_AD48_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD48_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.2495852
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_25E2_B7BA()
        {
            // <PERF>15.4178ms</PERF>

            // (Expression<Action>)(() => { for (;;) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action>)(() => { for (;;) Console.Write('.'); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_25E2_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_25E2_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.2650704
        [Ignore]
        // (10,72): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_DA7B_B7BA()
        {
            // <PERF>35.1077ms</PERF>

            // (Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<int[]>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_DA7B_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_DA7B_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.3002482
        [Ignore]
        // (10,75): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_34B8_B7BA()
        {
            // <PERF>18.8785ms</PERF>

            // (Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<object[]>>)(xs => { foreach (int x in xs) Console.Write(x); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_34B8_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_34B8_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.3191784
        [Ignore]
        // (10,83): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_3958_B7BA()
        {
            // <PERF>33.7538ms</PERF>

            // (Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })
            var actual = GetDebugView(@"(Expression<Action<IEnumerable<int>>>)(xs => { foreach (var x in xs) Console.Write(x); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_3958_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3958_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.3529880
        [Ignore]
        // (10,78): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_5598_B7BA()
        {
            // <PERF>25.578ms</PERF>

            // (Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (d) Console.Write('.'); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_5598_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_5598_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.3786896
        [Ignore]
        // (10,78): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_BB7C_B7BA()
        {
            // <PERF>36.409ms</PERF>

            // (Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })
            var actual = GetDebugView(@"(Expression<Action<IDisposable>>)(d => { using (var e = d) Console.WriteLine(e); })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_BB7C_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_BB7C_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.4151789
        [Ignore]
        // (10,73): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_2CF2_B7BA()
        {
            // <PERF>30.1508ms</PERF>

            // (Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })
            var actual = GetDebugView(@"(Expression<Action<object>>)(o => { lock (o) { Console.Write('.'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_2CF2_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2CF2_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.4454095
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_880F_B7BA()
        {
            // <PERF>63.3909ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } finally { Console.Write('F'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_880F_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_880F_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.5088495
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_19B3_B7BA()
        {
            // <PERF>28.6005ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch { Console.Write('C'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_19B3_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_19B3_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.5375058
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_0662_B7BA()
        {
            // <PERF>19.8335ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception) { Console.Write('C'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_0662_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_0662_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.5573875
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_F63E_B7BA()
        {
            // <PERF>23.1874ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_F63E_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_F63E_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.5806504
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_02EE_B7BA()
        {
            // <PERF>38.8423ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) when (e != null) { Console.WriteLine(e); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) when (e != null) { Console.WriteLine(e); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_02EE_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_02EE_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.6195632
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_1C02_B7BA()
        {
            // <PERF>13.2455ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (InvalidOperationException) { Console.Write('I'); } catch (OverflowException) { Console.Write('O'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_1C02_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1C02_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.6328609
        [Ignore]
        // (10,65): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_744C_B7BA()
        {
            // <PERF>36.5937ms</PERF>

            // (Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })
            var actual = GetDebugView(@"(Expression<Action>)(() => { try { Console.Write('T'); } catch (Exception e) { Console.WriteLine(e); } finally { Console.Write('F'); } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_744C_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_744C_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.6695055
        [Ignore]
        // (10,70): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_2156_B7BA()
        {
            // <PERF>30.4761ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) {} })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) {} })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_2156_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_2156_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.7000369
        [Ignore]
        // (10,70): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_FCA9_B7BA()
        {
            // <PERF>37.9369ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('0'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_FCA9_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_FCA9_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.7380251
        [Ignore]
        // (10,70): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_6832_B7BA()
        {
            // <PERF>13.6182ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: case 1: Console.Write('A'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_6832_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_6832_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.7516937
        [Ignore]
        // (10,70): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_4E9F_B7BA()
        {
            // <PERF>19.3814ms</PERF>

            // (Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int>>)(x => { switch (x) { case 0: Console.Write('A'); break; default: Console.Write('D'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_4E9F_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_4E9F_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.7711394
        [Ignore]
        // (10,71): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_30E5_B7BA()
        {
            // <PERF>14.0193ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: case null: Console.Write('N'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_30E5_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_30E5_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.7852100
        [Ignore]
        // (10,71): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_1754_B7BA()
        {
            // <PERF>23.4834ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: goto case null; case null: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: goto case null; case null: Console.Write('N'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_1754_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_1754_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.8087782
        [Ignore]
        // (10,71): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_AD7C_B7BA()
        {
            // <PERF>33.8716ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case 0: Console.Write('N'); break; case null: goto case 0; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_AD7C_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_AD7C_B7BA() => INCONCLUSIVE(); }

        // Elapsed = 00:00:06.8427118
        [Ignore]
        // (10,71): error CS0834: A lambda expression with a statement body cannot be converted to an expression tree
        [TestMethod]
        public void CompilerTest_3E56_B7BA()
        {
            // <PERF>21.3601ms</PERF>

            // (Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })
            var actual = GetDebugView(@"(Expression<Action<int?>>)(x => { switch (x) { case null: goto default; default: Console.Write('N'); break; } })");
            var expected = @"???";
            Assert.AreEqual(expected, actual);
            Verify.CompilerTest_3E56_B7BA();
        }

        partial class Review { /* override in .Verify.cs */ public virtual void CompilerTest_3E56_B7BA() => INCONCLUSIVE(); }

        partial class Review
        {
            protected void INCONCLUSIVE() { Assert.Inconclusive(); }
        }

        partial class Reviewed : Review
        {
            private void OK() {}
            private void FAIL(string message = "") { Assert.Fail(message); }
        }

        private Reviewed Verify = new Reviewed();
    }

/*
// NB: The code generated below accepts all tests. *DON'T* just copy/paste this to the .Verify.cs file
//     but review the tests one by one. This output is included in case a minor change is made to debug
//     output produced by DebugView() and all hashes are invalidated. In that case, this output can be
//     copied and pasted into .Verify.cs.

namespace Tests.Microsoft.CodeAnalysis.CSharp
{
    partial class CompilerTests
    {
        partial class Reviewed
        {
            public override void CompilerTest_9D30_AA02 => OK();
            public override void CompilerTest_3ECF_6910 => OK();
            public override void CompilerTest_F51F_B7BA => OK();
            public override void CompilerTest_E9F4_B7BA => OK();
            public override void CompilerTest_00C1_B7BA => OK();
            public override void CompilerTest_EDEC_B7BA => OK();
            public override void CompilerTest_6271_B7BA => OK();
            public override void CompilerTest_8E43_B7BA => OK();
            public override void CompilerTest_191C_B7BA => OK();
            public override void CompilerTest_6647_B7BA => OK();
            public override void CompilerTest_AB76_B7BA => OK();
            public override void CompilerTest_C598_B7BA => OK();
            public override void CompilerTest_55B7_B7BA => OK();
            public override void CompilerTest_7760_B7BA => OK();
            public override void CompilerTest_4B4B_B7BA => OK();
            public override void CompilerTest_22AA_B7BA => OK();
            public override void CompilerTest_0FFA_B7BA => OK();
            public override void CompilerTest_83AE_B7BA => OK();
            public override void CompilerTest_1A0E_B7BA => OK();
            public override void CompilerTest_B340_B7BA => OK();
            public override void CompilerTest_A997_B7BA => OK();
            public override void CompilerTest_CB0C_B7BA => OK();
            public override void CompilerTest_CF40_B7BA => OK();
            public override void CompilerTest_A8D0_B7BA => OK();
            public override void CompilerTest_0BD6_B7BA => OK();
            public override void CompilerTest_6102_B7BA => OK();
            public override void CompilerTest_7381_B7BA => OK();
            public override void CompilerTest_1245_B7BA => OK();
            public override void CompilerTest_3464_B7BA => OK();
            public override void CompilerTest_C90B_B7BA => OK();
            public override void CompilerTest_6674_B7BA => OK();
            public override void CompilerTest_AD48_B7BA => OK();
            public override void CompilerTest_25E2_B7BA => OK();
            public override void CompilerTest_DA7B_B7BA => OK();
            public override void CompilerTest_34B8_B7BA => OK();
            public override void CompilerTest_3958_B7BA => OK();
            public override void CompilerTest_5598_B7BA => OK();
            public override void CompilerTest_BB7C_B7BA => OK();
            public override void CompilerTest_2CF2_B7BA => OK();
            public override void CompilerTest_880F_B7BA => OK();
            public override void CompilerTest_19B3_B7BA => OK();
            public override void CompilerTest_0662_B7BA => OK();
            public override void CompilerTest_F63E_B7BA => OK();
            public override void CompilerTest_02EE_B7BA => OK();
            public override void CompilerTest_1C02_B7BA => OK();
            public override void CompilerTest_744C_B7BA => OK();
            public override void CompilerTest_2156_B7BA => OK();
            public override void CompilerTest_FCA9_B7BA => OK();
            public override void CompilerTest_6832_B7BA => OK();
            public override void CompilerTest_4E9F_B7BA => OK();
            public override void CompilerTest_30E5_B7BA => OK();
            public override void CompilerTest_1754_B7BA => OK();
            public override void CompilerTest_AD7C_B7BA => OK();
            public override void CompilerTest_3E56_B7BA => OK();
        }
    }
}
*/
}
